/*
   Generated by EX4 TO MQ4 decompile Service 
   Website: http://www.ex4Tomq4.net 
   E-mail : info@ex4Tomq4.net 
*/
#property copyright "ForexEASystems"
#property link      "http://www.forexeasystems.com"

#include <WinUser32.mqh>
//#include <stdlib.mqh>
#import "stdlib.ex4"
   string ErrorDescription(int a0);

#import "EA_SHARK6.0.8_ULTIMATE_Proxy.dll"
   int UserRegister(string a0, string a1, string a2);
   string EAVersion(string a0, int a1, int a2, int a3);
   int DllInit(string a0, double a1, int a2, int a3);
   int DllDeinit(string a0);
   int Rates(string a0, double& a1[], int a2, int a3);
   int BidAsk(string a0, double a1, double a2);
   double s1_setRules(string a0, int a1, int a2);
   double s2_setRules(string a0, int a1, int a2);
   int s1_openBuyRule(string a0);
   int s1_BuyOpened(string a0);
   int s1_openSellRule(string a0);
   int s1_SellOpened(string a0);
   int s2_openBuyRule(string a0);
   int s2_BuyOpened(string a0);
   int s2_openSellRule(string a0);
   int s2_SellOpened(string a0);
   int s1_closeBuyRule(string a0, double a1, double a2, double a3, int a4);
   int s1_closeSellRule(string a0, double a1, double a2, double a3, int a4);
   int s2_closeBuyRule(string a0, double a1, double a2, double a3, int a4);
   int s2_closeSellRule(string a0, double a1, double a2, double a3, int a4);
   double s1_low_qs(string a0);
   double s1_high_qs(string a0);
   double s2_low_qs(string a0);
   double s2_high_qs(string a0);
   void SetDrawdownCleanerState(int a0);
   int GetDrawdownCleanerState();
#import

extern string www.forexeasystems.com = "EA Shark 6.0.8 | ï¿½ All rights reserved";
extern string TradeManagementSettings = "---------------------------------------------";
extern bool Core1 = TRUE;
extern bool Core1TrailingStops = TRUE;
extern bool Core2 = TRUE;
extern bool Core2TrailingStops = TRUE;
extern int MaxTrades = 4;
extern string TimeSettings = "---------------------------------------------";
extern bool TradeSunday = FALSE;
extern int UTCOffset = 1;
extern string Note = "DST_is_to_ignore!";
extern string MoneyManagementSettings = "---------------------------------------------";
extern bool MoneyManagement = TRUE;
extern double RiskperTrade = 0.15;
extern double FixedLotSize = 0.1;
extern bool DrawDownCleaner_DDC = TRUE;
extern double MultiplicationFactor_DDC = 1.5;
extern string SpreadSettings = "---------------------------------------------";
extern double MaxSpread = 2.0;
extern double MaxSpreadDeviation = 1.0;
extern string NotificationSettings = "---------------------------------------------";
extern bool EmailNotification = FALSE;
extern bool TradeComments = TRUE;
extern string MagicNumbers = "---------------------------------------------";
extern int MagicNumberCore1 = 1122;
extern int MagicNumberCore2 = 2211;
extern string Colors = "---------------------------------------------";
extern color ForeColor = White;
int gi_244 = 51;
int gi_248 = 51;
int gi_252 = 30;
int gi_256 = 2;
int gi_260 = 22;
int gi_264 = 23;
int g_timeframe_268 = PERIOD_M30;
int gi_272 = 52;
int gi_276 = 52;
int gi_280 = 30;
int gi_284 = 2;
int gi_288 = 22;
int gi_292 = 23;
int g_timeframe_296 = PERIOD_M15;
bool gi_300 = TRUE;
double gd_304 = 100.0;
string gs_312 = "";
string gs_320 = "";
int gi_328 = 1;
int gia_332[];
int gi_336 = 0;
double gda_340[];
int gi_unused_344 = 0;
string gs_348 = "ExpertAdvisor_S6";
int gi_356 = 6;
int gi_360 = 0;
int gi_364 = 8;
string gs_368 = "EA Shark 6.0.8";
string gs_376 = "See also: EA Shark 6 User Manual \"Warning and Error Messages\".";
string gsa_unused_384[20];
int gi_unused_388 = 0;
string gsa_unused_392[20];
int gi_unused_396 = 0;
int gia_unused_400[20];
int gi_unused_404 = 0;
string g_name_408 = "separator1";
string g_name_416 = "separator2";
string g_name_424 = "separator3";
string g_name_432 = "separator4";
string g_name_440 = "separator5";
string gs_company_448 = "company";
string gs_currency_456 = "currency";
string g_name_464 = "currency value";
string gs_balance_472 = "balance";
string g_name_480 = "balance value";
string g_name_488 = "free margin";
string g_name_496 = "free margin value";
string g_name_504 = "used margin";
string g_name_512 = "used margin value";
string gs_spread_520 = "spread";
string g_name_528 = "spread value";
string g_name_536 = "max spread";
string g_name_544 = "max spread value";
string gs_core1_552 = "core1";
string g_name_560 = "core1 value";
string gs_core2_568 = "core2";
string g_name_576 = "core2 value";
string gs_errors_584 = "errors";
string gs_note1_592 = "note1";
string gs_note2_600 = "note2";
int gi_608 = 195;
int gi_612;
int gi_616;
double gd_620;
double gd_628;
int gi_636;
int gi_640 = 1;
int gi_644;
int gi_648;
int gi_652 = 1;
int gi_656;
string gs_660;
bool gi_668;
int gi_672 = 0;
double gd_676;
double gd_684;
int gi_unused_688;

int init() {
   string ls_0;
   int li_8;
   gd_676 = 0.0;
   gd_684 = 0.0;
   gi_644 = 2;
   gi_668 = FALSE;
   gi_648 = 0;
   gi_656 = 0;
   gi_636 = 0;
   gd_620 = 0.0001 / Point;
   gi_616 = MarketInfo(Symbol(), MODE_STOPLEVEL);
   if (MarketInfo(Symbol(), MODE_LOTSTEP) == 0.01) gi_328 = 2;
   else {
      if (MarketInfo(Symbol(), MODE_LOTSTEP) == 0.1) gi_328 = 1;
      else
         if (MarketInfo(Symbol(), MODE_LOTSTEP) == 1.0) gi_328 = 0;
   }
   if (IsTestingMode() == 1) gs_660 = "1";
   else gs_660 = "0";
   if (TradeComments == TRUE) {
      gs_312 = "EA Shark 6.0.8 Core 1";
      gs_320 = "EA Shark 6.0.8 Core 2";
   }
   if (IsDllsAllowed() == FALSE) {
      Alert("DLL function calls disabled. Please change the setup and allow DLL imports.");
      if (IsTestingMode() != 1) return (1);
      gi_668 = TRUE;
      return (1);
   }
   if (IsTestingMode() == 1) {
      if (IsReallyConnected() == 1) {
         ls_0 = "Connection to the broker server MUST be established to provide correct test results. Please make sure that the trading terminal is connected to the server.\n\n" +
            "Click \"Yes\" to continue. Click \"No\" to prevent Expert Advisor to run in test mode.";
         li_8 = MessageBoxA(0, ls_0, gs_368, 36);
         if (li_8 == 7) {
            Print("The expert advisor is disabled to run in testing mode.");
            if (IsTestingMode() != 1) return (1);
            gi_668 = TRUE;
            return (1);
         }
      }
   }
   DllInit(gs_660, Point, Digits, UTCOffset);
   Registered();
   if (IsTestingMode() == 0) CheckVersion();
   if (IsTestingMode() == 0) Comments();
   string ls_12 = Errors(1);
   if (StringLen(ls_12) > 0) {
      MessageBoxA(0, ls_12, gs_368, 16);
      ls_12 = Errors(1);
      if (IsTestingMode() != 1) return (1);
      gi_668 = TRUE;
      return (1);
   }
   string ls_20 = Warnings();
   if (StringLen(ls_20) > 0) MessageBoxA(0, ls_20, gs_368, 48);
   SaveCurrentPositions();
   return (0);
}

int start() {
   string ls_0;
   if (IsDllsAllowed() != FALSE) {
      if (gi_668 != TRUE) {
         if (IsTestingMode() == 0) {
            Registered();
            CheckVersion();
            Comments();
            ls_0 = Errors(0);
            if (StringLen(ls_0) > 0) {
               MessageBoxA(0, ls_0, gs_368, 16);
               ls_0 = Errors(0);
            }
         }
         run_Strategy1();
         run_Strategy2();
      }
   }
   return (0);
}

int deinit() {
   ObjectDelete(g_name_408);
   ObjectDelete(g_name_416);
   ObjectDelete(g_name_424);
   ObjectDelete(g_name_432);
   ObjectDelete(g_name_440);
   ObjectDelete(gs_company_448);
   ObjectDelete(gs_currency_456);
   ObjectDelete(g_name_464);
   ObjectDelete(gs_balance_472);
   ObjectDelete(g_name_480);
   ObjectDelete(g_name_488);
   ObjectDelete(g_name_496);
   ObjectDelete(g_name_504);
   ObjectDelete(g_name_512);
   ObjectDelete(gs_spread_520);
   ObjectDelete(g_name_528);
   ObjectDelete(g_name_536);
   ObjectDelete(g_name_544);
   ObjectDelete(gs_core1_552);
   ObjectDelete(g_name_560);
   ObjectDelete(gs_core2_568);
   ObjectDelete(g_name_576);
   ObjectDelete(gs_errors_584);
   ObjectDelete(gs_note1_592);
   ObjectDelete(gs_note2_600);
   DllDeinit(gs_660);
   return (0);
}

int s1_openBuy() {
   double ld_24;
   double ld_0 = 0;
   double ld_8 = 0;
   double ld_32 = s1_low_qs(gs_660);
   if (ld_32 > 0.0) {
      ld_24 = (Bid - ld_32 + Point * gd_620) / Point;
      if (gi_248 > 0 && ld_24 > gi_248 * gd_620) ld_24 = gi_248 * gd_620;
      if (ld_24 < gi_252 * gd_620) ld_24 = gi_252 * gd_620;
   } else ld_24 = gi_252 * gd_620;
   if (ld_24 < gi_616) ld_24 = gi_616;
   double ld_16 = gi_244 * gd_620;
   if (ld_16 < gi_616) ld_16 = gi_616;
   ld_8 = NormalizeDouble(Bid - ld_24 * Point, Digits);
   ld_0 = NormalizeDouble(Ask + ld_16 * Point, Digits);
   return (openOrder(OP_BUY, gd_628, Ask, ld_0, ld_8, MagicNumberCore1, Blue, 1, gs_312));
}

int s1_openSell() {
   double ld_24;
   double ld_0 = 0;
   double ld_8 = 0;
   double ld_32 = s1_high_qs(gs_660);
   if (ld_32 > 0.0) {
      ld_24 = (ld_32 - Ask + Point * gd_620) / Point;
      if (gi_248 > 0 && ld_24 > gi_248 * gd_620) ld_24 = gi_248 * gd_620;
      if (ld_24 < gi_252 * gd_620) ld_24 = gi_252 * gd_620;
   } else ld_24 = gi_252 * gd_620;
   if (ld_24 < gi_616) ld_24 = gi_616;
   double ld_16 = gi_244 * gd_620;
   if (ld_16 < gi_616) ld_16 = gi_616;
   ld_8 = NormalizeDouble(Ask + ld_24 * Point, Digits);
   ld_0 = NormalizeDouble(Bid - ld_16 * Point, Digits);
   return (openOrder(OP_SELL, gd_628, Bid, ld_0, ld_8, MagicNumberCore1, Red, 1, gs_312));
}

int s2_openBuy() {
   double ld_24;
   double ld_0 = 0;
   double ld_8 = 0;
   double ld_32 = s2_low_qs(gs_660);
   if (ld_32 > 0.0) {
      ld_24 = (Bid - ld_32 + Point * gd_620) / Point;
      if (gi_276 > 0 && ld_24 > gi_276 * gd_620) ld_24 = gi_276 * gd_620;
      if (ld_24 < gi_280 * gd_620) ld_24 = gi_280 * gd_620;
   } else ld_24 = gi_280 * gd_620;
   if (ld_24 < gi_616) ld_24 = gi_616;
   double ld_16 = gi_272 * gd_620;
   if (ld_16 < gi_616) ld_16 = gi_616;
   ld_8 = NormalizeDouble(Bid - ld_24 * Point, Digits);
   ld_0 = NormalizeDouble(Ask + ld_16 * Point, Digits);
   return (openOrder(OP_BUY, gd_628, Ask, ld_0, ld_8, MagicNumberCore2, Blue, 1, gs_320));
}

int s2_openSell() {
   double ld_24;
   double ld_0 = 0;
   double ld_8 = 0;
   double ld_32 = s2_high_qs(gs_660);
   if (ld_32 > 0.0) {
      ld_24 = (ld_32 - Ask + Point * gd_620) / Point;
      if (gi_276 > 0 && ld_24 > gi_276 * gd_620) ld_24 = gi_276 * gd_620;
      if (ld_24 < gi_280 * gd_620) ld_24 = gi_280 * gd_620;
   } else ld_24 = gi_280 * gd_620;
   if (ld_24 < gi_616) ld_24 = gi_616;
   double ld_16 = gi_272 * gd_620;
   if (ld_16 < gi_616) ld_16 = gi_616;
   ld_8 = NormalizeDouble(Ask + ld_24 * Point, Digits);
   ld_0 = NormalizeDouble(Bid - ld_16 * Point, Digits);
   return (openOrder(OP_SELL, gd_628, Bid, ld_0, ld_8, MagicNumberCore2, Red, 1, gs_320));
}

void s1_buyControl() {
   int li_8;
   int order_total_0 = OrdersTotal();
   for (int pos_4 = order_total_0 - 1; pos_4 >= 0; pos_4--) {
      if (OrderSelect(pos_4, SELECT_BY_POS) != FALSE) {
         if (OrderMagicNumber() == MagicNumberCore1) {
            if (OrderType() == OP_BUY) {
               if (Core1TrailingStops == TRUE && gi_256 > 0) {
                  if (Bid - OrderOpenPrice() > Point * gd_620 * gi_256) {
                     if (Bid - getVSL(OrderTicket()) > Point * gd_620 * gi_256 || getVSL(OrderTicket()) == 0.0) {
                        waitForContext();
                        setVSL(OrderTicket(), NormalizeDouble(Bid - Point * gd_620 * gi_256, Digits));
                     }
                  }
               }
               if (s1_closeBuyRule(gs_660, OrderOpenPrice(), OrderProfit(), getVSL(OrderTicket()), OrderOpenTime()) > 0) {
                  li_8 = closeOrder(0, Violet);
                  if (li_8 < 0) break;
               }
            }
         }
      }
   }
}

void s1_sellControl() {
   int li_8;
   int order_total_0 = OrdersTotal();
   for (int pos_4 = order_total_0 - 1; pos_4 >= 0; pos_4--) {
      if (OrderSelect(pos_4, SELECT_BY_POS) != FALSE) {
         if (OrderMagicNumber() == MagicNumberCore1) {
            if (OrderType() == OP_SELL) {
               if (Core1TrailingStops == TRUE && gi_256 > 0) {
                  if (OrderOpenPrice() - Ask > Point * gd_620 * gi_256) {
                     if (getVSL(OrderTicket()) - Ask > Point * gd_620 * gi_256 || getVSL(OrderTicket()) == 0.0) {
                        waitForContext();
                        setVSL(OrderTicket(), NormalizeDouble(Ask + Point * gd_620 * gi_256, Digits));
                     }
                  }
               }
               if (s1_closeSellRule(gs_660, OrderOpenPrice(), OrderProfit(), getVSL(OrderTicket()), OrderOpenTime()) > 0) {
                  li_8 = closeOrder(1, Violet);
                  if (li_8 < 0) break;
               }
            }
         }
      }
   }
}

void s2_buyControl() {
   int li_8;
   int order_total_0 = OrdersTotal();
   for (int pos_4 = order_total_0 - 1; pos_4 >= 0; pos_4--) {
      if (OrderSelect(pos_4, SELECT_BY_POS) != FALSE) {
         if (OrderMagicNumber() == MagicNumberCore2) {
            if (OrderType() == OP_BUY) {
               if (Core2TrailingStops == TRUE && gi_284 > 0) {
                  if (Bid - OrderOpenPrice() > Point * gd_620 * gi_284) {
                     if (Bid - getVSL(OrderTicket()) > Point * gd_620 * gi_284 || getVSL(OrderTicket()) == 0.0) {
                        waitForContext();
                        setVSL(OrderTicket(), NormalizeDouble(Bid - Point * gd_620 * gi_284, Digits));
                     }
                  }
               }
               if (s2_closeBuyRule(gs_660, OrderOpenPrice(), OrderProfit(), getVSL(OrderTicket()), OrderOpenTime()) > 0) {
                  li_8 = closeOrder(0, Violet);
                  if (li_8 < 0) break;
               }
            }
         }
      }
   }
}

void s2_sellControl() {
   int li_8;
   int order_total_0 = OrdersTotal();
   for (int pos_4 = order_total_0 - 1; pos_4 >= 0; pos_4--) {
      if (OrderSelect(pos_4, SELECT_BY_POS) != FALSE) {
         if (OrderMagicNumber() == MagicNumberCore2) {
            if (OrderType() == OP_SELL) {
               if (Core2TrailingStops == TRUE && gi_284 > 0) {
                  if (OrderOpenPrice() - Ask > Point * gd_620 * gi_284) {
                     if (getVSL(OrderTicket()) - Ask > Point * gd_620 * gi_284 || getVSL(OrderTicket()) == 0.0) {
                        waitForContext();
                        setVSL(OrderTicket(), NormalizeDouble(Ask + Point * gd_620 * gi_284, Digits));
                     }
                  }
               }
               if (s2_closeSellRule(gs_660, OrderOpenPrice(), OrderProfit(), getVSL(OrderTicket()), OrderOpenTime()) > 0) {
                  li_8 = closeOrder(1, Violet);
                  if (li_8 < 0) break;
               }
            }
         }
      }
   }
}

int SetRates() {
   double lda_0[][6];
   double lda_4[][6];
   double lda_8[][6];
   double lda_12[][6];
   double lda_16[][6];
   double lda_20[][6];
   int li_28 = ArrayCopyRates(lda_0, NULL, PERIOD_M1);
   int error_24 = GetLastError();
   if (error_24 != 0/* NO_ERROR */) return (-1);
   int li_32 = ArrayCopyRates(lda_4, NULL, PERIOD_M5);
   error_24 = GetLastError();
   if (error_24 != 0/* NO_ERROR */) return (-1);
   int li_36 = ArrayCopyRates(lda_8, NULL, PERIOD_M15);
   error_24 = GetLastError();
   if (error_24 != 0/* NO_ERROR */) return (-1);
   int li_40 = ArrayCopyRates(lda_12, NULL, PERIOD_M30);
   error_24 = GetLastError();
   if (error_24 != 0/* NO_ERROR */) return (-1);
   Rates(gs_660, lda_0, li_28, 1);
   Rates(gs_660, lda_4, li_32, 5);
   Rates(gs_660, lda_8, li_36, 15);
   Rates(gs_660, lda_12, li_40, 30);
   BidAsk(gs_660, NormalizeDouble(Bid, Digits), NormalizeDouble(Ask, Digits));
   return (0);
}

void run_Strategy1() {
   string ls_0;
   int datetime_8;
   int shift_12;
   int li_16;
   double ld_20;
   int li_28;
   int li_32;
   if (gi_644 == 0) {
      if (Core1 != FALSE) {
         RefreshRates();
         if (SetRates() != -1) {
            datetime_8 = TimeCurrent();
            gi_612 = datetime_8 - 3600.0 * UTCOffset;
            li_16 = datetime_8 - 3600.0 * TimeHour(gi_612) - 60 * TimeMinute(gi_612) - TimeSeconds(gi_612);
            if (datetime_8 - li_16 < 43200.0) shift_12 = iBarShift(NULL, g_timeframe_268, li_16 - 86400);
            else shift_12 = iBarShift(NULL, g_timeframe_268, li_16);
            ld_20 = s1_setRules(gs_660, datetime_8, shift_12);
            s1_buyControl();
            s1_sellControl();
            CheckClosePositions();
            SaveCurrentPositions();
            if (CoreIsTradeTime(gi_300, TradeSunday, gi_260, gi_264) != 0) {
               if (openPositions(MagicNumberCore1, MagicNumberCore2) < MaxTrades) {
                  gd_628 = MMLots();
                  if (gd_628 == 0.0) {
                     ls_0 = "Not enough free Margin. Please change Money Management setup. " 
                        + "\n" 
                     + gs_376;
                     Print(ls_0);
                     Alert(ls_0);
                  } else {
                     if (s1_openBuyRule(gs_660) > 0) {
                        li_28 = s1_openBuy();
                        if (li_28 >= 0) s1_BuyOpened(gs_660);
                     } else {
                        if (s1_openSellRule(gs_660) > 0) {
                           li_32 = s1_openSell();
                           if (li_32 >= 0) s1_SellOpened(gs_660);
                        }
                     }
                  }
               }
            }
         }
      }
   }
}

void run_Strategy2() {
   string ls_0;
   int datetime_8;
   int shift_12;
   int li_16;
   double ld_20;
   int li_28;
   int li_32;
   if (gi_644 == 0) {
      if (Core2 != FALSE) {
         RefreshRates();
         if (SetRates() != -1) {
            datetime_8 = TimeCurrent();
            gi_612 = datetime_8 - 3600.0 * UTCOffset;
            li_16 = datetime_8 - 3600.0 * TimeHour(gi_612) - 60 * TimeMinute(gi_612) - TimeSeconds(gi_612);
            if (datetime_8 - li_16 < 43200.0) shift_12 = iBarShift(NULL, g_timeframe_296, li_16 - 86400);
            else shift_12 = iBarShift(NULL, g_timeframe_296, li_16);
            ld_20 = s2_setRules(gs_660, datetime_8, shift_12);
            s2_buyControl();
            s2_sellControl();
            CheckClosePositions();
            SaveCurrentPositions();
            if (CoreIsTradeTime(gi_300, TradeSunday, gi_288, gi_292) != 0) {
               if (openPositions(MagicNumberCore1, MagicNumberCore2) < MaxTrades) {
                  gd_628 = MMLots();
                  if (gd_628 == 0.0) {
                     ls_0 = "Not enough free Margin. Please change Money Management setup. " 
                        + "\n" 
                     + gs_376;
                     Print(ls_0);
                     Alert(ls_0);
                  } else {
                     if (s2_openBuyRule(gs_660) > 0) {
                        li_28 = s2_openBuy();
                        if (li_28 >= 0) s2_BuyOpened(gs_660);
                     } else {
                        if (s2_openSellRule(gs_660) > 0) {
                           li_32 = s2_openSell();
                           if (li_32 >= 0) s2_SellOpened(gs_660);
                        }
                     }
                  }
               }
            }
         }
      }
   }
}

int waitForContext() {
   for (int count_0 = 0; IsTradeContextBusy() && count_0 < 20; count_0++) Sleep(15);
   if (count_0 >= 20) Print("Trade context is busy more than ", DoubleToStr(15 * count_0 / 1000, 2), " seconds");
   else
      if (count_0 > 0) Print("Trade context was busy ", DoubleToStr(15 * count_0 / 1000, 2), " seconds");
   return (count_0);
}

int openOrder(int a_cmd_0, double a_lots_4, double a_price_12, double a_price_20, double a_price_28, int a_magic_36, color a_color_40, bool ai_44, string a_comment_48) {
   int error_56;
   string ls_88;
   double price_60 = 0;
   double price_68 = 0;
   if (!ai_44) {
      price_60 = a_price_28;
      price_68 = a_price_20;
   }
   double ld_76 = MaxSpread * gd_620;
   if (ld_76 > 0.0 && ld_76 < MarketInfo(Symbol(), MODE_SPREAD)) return (0);
   waitForContext();
   int ticket_84 = OrderSend(Symbol(), a_cmd_0, a_lots_4, a_price_12, MaxSpreadDeviation * gd_620, price_60, price_68, a_comment_48, a_magic_36, 0, a_color_40);
   if (ticket_84 > 0) {
      if (ai_44) {
         if (OrderSelect(ticket_84, SELECT_BY_TICKET)) {
            waitForContext();
            OrderModify(ticket_84, OrderOpenPrice(), a_price_28, a_price_20, 0, a_color_40);
         }
      }
      if (EmailNotification) {
         ls_88 = "EA Shark 6.0" + " Symbol: " + Symbol();
         SendMail(ls_88, "Open " + OpPrint(a_cmd_0) + ": [" + Symbol() + "] " + NormalizeDouble(a_price_12, Digits));
      }
   } else {
      error_56 = GetLastError();
      if (!ai_44) return (openOrder(a_cmd_0, a_lots_4, a_price_12, a_price_20, a_price_28, a_magic_36, a_color_40, 0, a_comment_48));
      Print(OpPrint(a_cmd_0) + " operation failed - error(", error_56, "): ", ErrorDescription(error_56));
   }
   return (ticket_84);
}

int closeOrder(int ai_0, color a_color_4) {
   double price_8;
   int error_16;
   for (int count_20 = 0; count_20 < 20; count_20++) {
      if (waitForContext() > 5) RefreshRates();
      if (ai_0 == 0) price_8 = Bid;
      else price_8 = Ask;
      if (OrderClose(OrderTicket(), OrderLots(), price_8, MaxSpreadDeviation * gd_620, a_color_4)) return (-1);
      error_16 = GetLastError();
      Print("Order close operation failed - error(", error_16, "): ", ErrorDescription(error_16));
   }
   return (OrderTicket());
}

double MMLots() {
   double ld_0 = 0.0;
   if (MoneyManagement == TRUE) {
      ld_0 = RiskperTrade * AccountFreeMargin() / MarketInfo(Symbol(), MODE_MARGINREQUIRED) / (AccountLeverage() / 100.0);
      if (DrawDownCleaner_DDC) {
         if (IsTestingMode() == 0) {
            if (GetDrawdownCleanerState() == 1) ld_0 = MultiplicationFactor_DDC * ld_0;
         } else
            if (gi_672 == TRUE) ld_0 = MultiplicationFactor_DDC * ld_0;
      }
   } else ld_0 = FixedLotSize;
   double ld_8 = NormalizeDouble(MarketInfo(Symbol(), MODE_MARGINREQUIRED) * ld_0, 8);
   if (NormalizeDouble(AccountFreeMargin(), 8) < ld_8) return (0);
   return (NormalizeLots(ld_0));
}

double NormalizeLots(double ad_0) {
   double lotstep_8 = MarketInfo(Symbol(), MODE_LOTSTEP);
   double minlot_16 = MarketInfo(Symbol(), MODE_MINLOT);
   double ld_24 = MarketInfo(Symbol(), MODE_MAXLOT);
   double ld_32 = MathCeil(ad_0 / lotstep_8) * lotstep_8;
   if (ld_32 < minlot_16) ld_32 = 0;
   if (ld_32 > gd_304) ld_32 = gd_304;
   if (ld_32 > ld_24) ld_32 = ld_24;
   ld_32 = NormalizeDouble(ld_32, gi_328);
   return (ld_32);
}

int CoreIsTradeTime(int ai_0, bool ai_4, int ai_8, int ai_12) {
   int day_of_week_16;
   bool li_ret_20 = TRUE;
   int hour_24 = TimeHour(gi_612);
   if ((ai_8 < ai_12 && (ai_8 <= hour_24 && hour_24 <= ai_12 - 1)) || (ai_8 >= ai_12 && ai_8 <= hour_24 || hour_24 <= ai_12 - 1)) li_ret_20 = TRUE;
   else li_ret_20 = FALSE;
   if (li_ret_20) {
      day_of_week_16 = TimeDayOfWeek(gi_612);
      if (day_of_week_16 == 0 && ai_4 == FALSE) li_ret_20 = FALSE;
      else {
         if (day_of_week_16 == 5) {
            if (ai_0 == 0) li_ret_20 = FALSE;
            else
               if (hour_24 >= ai_8) li_ret_20 = FALSE;
         } else {
            if (day_of_week_16 == 1 && ai_8 >= ai_12 && hour_24 <= ai_12 - 1) {
               if (!ai_4) li_ret_20 = FALSE;
            } else
               if (day_of_week_16 > 5) li_ret_20 = FALSE;
         }
      }
   }
   return (li_ret_20);
}

void CountBalance(double ad_0) {
   gd_676 += ad_0;
   if (gd_684 < gd_676) gd_684 = gd_676;
   if (gd_684 > gd_676) {
      if (IsTestingMode() == 0) SetDrawdownCleanerState(1);
      gi_672 = TRUE;
      return;
   }
   if (IsTestingMode() == 0) SetDrawdownCleanerState(0);
   gi_672 = FALSE;
}

string OpPrint(int ai_0) {
   switch (ai_0) {
   case 0:
      return ("Buy");
   case 1:
      return ("Sell");
   }
   return ("Order");
}

void Comments() {
   string ls_0;
   string ls_8;
   string ls_16;
   string ls_24;
   int x_32;
   string ls_36;
   string text_44;
   if (IsTestingMode() != 1) {
      ls_0 = "Enabled";
      if (Core1 == FALSE) ls_0 = "Disabled";
      ls_8 = "Enabled";
      if (Core2 == FALSE) ls_8 = "Disabled";
      ls_16 = SpreadToStr();
      ls_24 = MaxSpreadToStr();
      if (ObjectFind(g_name_408) == -1) CreateLabel(g_name_408, "---------------------------------------------------------------", 7, "Tahoma", ForeColor, 4, 12, 0, 0);
      if (ObjectFind(g_name_416) == -1) CreateLabel(g_name_416, "---------------------------------------------------------------", 7, "Tahoma", ForeColor, 4, 36, 0, 0);
      if (ObjectFind(g_name_424) == -1) CreateLabel(g_name_424, "---------------------------------------------------------------", 7, "Tahoma", ForeColor, 4, 96, 0, 0);
      if (ObjectFind(g_name_432) == -1) CreateLabel(g_name_432, "---------------------------------------------------------------", 7, "Tahoma", ForeColor, 4, 132, 0, 0);
      if (ObjectFind(g_name_440) == -1) CreateLabel(g_name_440, "---------------------------------------------------------------", 7, "Tahoma", ForeColor, 4, 168, 0, 0);
      if (ObjectFind(gs_company_448) == -1) CreateLabel(gs_company_448, "EA Shark 6.0.8 @ www.forexeasystems.com", 7, "Tahoma", ForeColor, 4, 24, 0, 0);
      if (ObjectFind(gs_currency_456) == -1) CreateLabel(gs_currency_456, "AC Currency:", 7, "Tahoma", ForeColor, 4, 48, 0, 0);
      x_32 = gi_608 - 7 * StringLen(AccountCurrency());
      if (AccountCurrency() == "JPY") x_32 += 3;
      if (ObjectFind(g_name_464) == -1) CreateLabel(g_name_464, AccountCurrency(), 7, "Tahoma", ForeColor, x_32, 48, 0, 0);
      if (ObjectFind(gs_balance_472) == -1) CreateLabel(gs_balance_472, "AC Balance:", 7, "Tahoma", ForeColor, 4, 60, 0, 0);
      x_32 = gi_608 - 5 * StringLen(DoubleToStr(AccountBalance(), 2));
      if (AccountBalance() < 0.0) x_32 += 2;
      if (ObjectFind(g_name_480) == -1) CreateLabel(g_name_480, DoubleToStr(AccountBalance(), 2), 7, "Tahoma", ForeColor, x_32, 60, 0, 0);
      else {
         ObjectSet(g_name_480, OBJPROP_XDISTANCE, x_32);
         ObjectSetText(g_name_480, DoubleToStr(AccountBalance(), 2), 7, "Tahoma", ForeColor);
      }
      if (ObjectFind(g_name_488) == -1) CreateLabel(g_name_488, "Free Margin:", 7, "Tahoma", ForeColor, 4, 72, 0, 0);
      x_32 = gi_608 - 5 * StringLen(DoubleToStr(AccountFreeMargin(), 2));
      if (AccountFreeMargin() < 0.0) x_32 += 2;
      if (ObjectFind(g_name_496) == -1) CreateLabel(g_name_496, DoubleToStr(AccountFreeMargin(), 2), 7, "Tahoma", ForeColor, x_32, 72, 0, 0);
      else {
         ObjectSet(g_name_496, OBJPROP_XDISTANCE, x_32);
         ObjectSetText(g_name_496, DoubleToStr(AccountFreeMargin(), 2), 7, "Tahoma", ForeColor);
      }
      if (ObjectFind(g_name_504) == -1) CreateLabel(g_name_504, "Used Margin:", 7, "Tahoma", ForeColor, 4, 84, 0, 0);
      x_32 = gi_608 - 5 * StringLen(DoubleToStr(AccountMargin(), 2));
      if (AccountMargin() < 0.0) x_32 += 2;
      if (ObjectFind(g_name_512) == -1) CreateLabel(g_name_512, DoubleToStr(AccountMargin(), 2), 7, "Tahoma", ForeColor, x_32, 84, 0, 0);
      else {
         ObjectSet(g_name_512, OBJPROP_XDISTANCE, x_32);
         ObjectSetText(g_name_512, DoubleToStr(AccountMargin(), 2), 7, "Tahoma", ForeColor);
      }
      if (ObjectFind(gs_spread_520) == -1) CreateLabel(gs_spread_520, "Spread:", 7, "Tahoma", ForeColor, 4, 108, 0, 0);
      ls_16 = ls_16 + " Pips";
      x_32 = gi_608 - 5 * StringLen(ls_16);
      if (StringFind(ls_16, ".", 0) != -1) x_32 += 4;
      if (ObjectFind(g_name_528) == -1) CreateLabel(g_name_528, ls_16, 7, "Tahoma", ForeColor, x_32, 108, 0, 0);
      else {
         ObjectSet(g_name_528, OBJPROP_XDISTANCE, x_32);
         ObjectSetText(g_name_528, ls_16, 7, "Tahoma", ForeColor);
      }
      if (ObjectFind(g_name_536) == -1) CreateLabel(g_name_536, "Max Spread:", 7, "Tahoma", ForeColor, 4, 120, 0, 0);
      ls_24 = ls_24 + " Pips";
      x_32 = gi_608 - 5 * StringLen(ls_24);
      if (StringFind(ls_24, ".", 0) != -1) x_32 += 4;
      if (ObjectFind(g_name_544) == -1) CreateLabel(g_name_544, ls_24, 7, "Tahoma", ForeColor, x_32, 120, 0, 0);
      else {
         ObjectSet(g_name_544, OBJPROP_XDISTANCE, x_32);
         ObjectSetText(g_name_544, ls_24, 7, "Tahoma", ForeColor);
      }
      if (ObjectFind(gs_core1_552) == -1) CreateLabel(gs_core1_552, "Core1:", 7, "Tahoma", ForeColor, 4, 144, 0, 0);
      x_32 = gi_608 - 5 * StringLen(ls_0);
      if (ObjectFind(g_name_560) == -1) CreateLabel(g_name_560, ls_0, 7, "Tahoma", ForeColor, x_32, 144, 0, 0);
      else {
         ObjectSet(g_name_560, OBJPROP_XDISTANCE, x_32);
         ObjectSetText(g_name_560, ls_0, 7, "Tahoma", ForeColor);
      }
      if (ObjectFind(gs_core2_568) == -1) CreateLabel(gs_core2_568, "Core2:", 7, "Tahoma", ForeColor, 4, 156, 0, 0);
      x_32 = gi_608 - 5 * StringLen(ls_8);
      if (ObjectFind(g_name_576) == -1) CreateLabel(g_name_576, ls_8, 7, "Tahoma", ForeColor, x_32, 156, 0, 0);
      else {
         ObjectSet(g_name_576, OBJPROP_XDISTANCE, x_32);
         ObjectSetText(g_name_576, ls_8, 7, "Tahoma", ForeColor);
      }
      ls_36 = Codes();
      if (StringLen(ls_36) > 0) {
         text_44 = "Errors: " + ls_36;
         if (ObjectFind(gs_errors_584) == -1) {
            CreateLabel(gs_errors_584, text_44, 7, "Tahoma", ForeColor, 4, 180, 0, 0);
            CreateLabel(gs_note1_592, "Please, correct your setup.", 7, "Tahoma", ForeColor, 4, 192, 0, 0);
            CreateLabel(gs_note2_600, "See user manual for details.", 7, "Tahoma", ForeColor, 4, 204, 0, 0);
         } else {
            ObjectSetText(gs_errors_584, text_44, 7, "Tahoma", ForeColor);
            ObjectSetText(gs_note1_592, "Please, correct your setup.", 7, "Tahoma", ForeColor);
            ObjectSetText(gs_note2_600, "See user manual for details.", 7, "Tahoma", ForeColor);
         }
      } else {
         if (ObjectFind(gs_errors_584) != -1) {
            ObjectDelete(gs_errors_584);
            ObjectDelete(gs_note1_592);
            ObjectDelete(gs_note2_600);
         }
      }
   }
}

void CreateLabel(string a_name_0, string a_text_8, int a_fontsize_16, string a_fontname_20, color a_color_28, int a_x_32, int a_y_36, int a_corner_40, int a_angle_44) {
   ObjectCreate(a_name_0, OBJ_LABEL, 0, 0, 0);
   ObjectSet(a_name_0, OBJPROP_XDISTANCE, a_x_32);
   ObjectSet(a_name_0, OBJPROP_YDISTANCE, a_y_36);
   ObjectSet(a_name_0, OBJPROP_BACK, FALSE);
   ObjectSet(a_name_0, OBJPROP_CORNER, a_corner_40);
   ObjectSet(a_name_0, OBJPROP_ANGLE, a_angle_44);
   ObjectSetText(a_name_0, a_text_8, a_fontsize_16, a_fontname_20, a_color_28);
}

int openPositions(int a_magic_0, int a_magic_4) {
   int count_8 = 0;
   for (int pos_12 = OrdersTotal() - 1; pos_12 >= 0; pos_12--) {
      OrderSelect(pos_12, SELECT_BY_POS, MODE_TRADES);
      if (a_magic_0 == OrderMagicNumber() || a_magic_4 == OrderMagicNumber()) count_8++;
   }
   return (count_8);
}

void CheckClosePositions() {
   int lia_8[];
   string ls_36;
   int order_total_0 = OrdersTotal();
   int li_4 = 0;
   bool li_12 = TRUE;
   int li_unused_16 = 0;
   int ticket_20 = 0;
   ArrayResize(lia_8, MathMax(order_total_0, 1));
   ArrayInitialize(lia_8, 0.0);
   for (int pos_24 = order_total_0 - 1; pos_24 >= 0; pos_24--) {
      if (OrderSelect(pos_24, SELECT_BY_POS) != FALSE) {
         if (OrderMagicNumber() == MagicNumberCore1 || OrderMagicNumber() == MagicNumberCore2) {
            lia_8[li_4] = OrderTicket();
            li_4++;
         }
      }
   }
   ArrayResize(lia_8, MathMax(li_4, 1));
   for (int index_28 = 0; index_28 < gi_336; index_28++) {
      ticket_20 = gia_332[index_28];
      li_12 = TRUE;
      for (int index_32 = 0; index_32 < li_4; index_32++) {
         if (ticket_20 == lia_8[index_32]) {
            li_12 = FALSE;
            break;
         }
      }
      if (li_12 == TRUE) {
         if (OrderSelect(ticket_20, SELECT_BY_TICKET, MODE_HISTORY) != FALSE) {
            CountBalance(OrderProfit());
            if (EmailNotification) {
               ls_36 = "EA Shark 6.0" + " Symbol: " + Symbol();
               SendMail(ls_36, "Close " + OpPrint(OrderType()) + ": [" + Symbol() + "] " + NormalizeDouble(OrderClosePrice(), Digits));
            }
         }
      }
   }
}

void SaveCurrentPositions() {
   int lia_8[];
   double lda_12[];
   int order_total_0 = OrdersTotal();
   int li_4 = 0;
   ArrayResize(lia_8, MathMax(order_total_0, 1));
   ArrayResize(lda_12, MathMax(order_total_0, 1));
   ArrayInitialize(lia_8, 0.0);
   ArrayInitialize(lda_12, 0.0);
   for (int pos_16 = order_total_0 - 1; pos_16 >= 0; pos_16--) {
      if (OrderSelect(pos_16, SELECT_BY_POS) != FALSE) {
         if (OrderMagicNumber() == MagicNumberCore1 || OrderMagicNumber() == MagicNumberCore2) {
            lia_8[li_4] = OrderTicket();
            lda_12[li_4] = getVSL(OrderTicket());
            li_4++;
         }
      }
   }
   ArrayResize(lia_8, MathMax(li_4, 1));
   ArrayResize(gia_332, MathMax(li_4, 1));
   ArrayResize(gda_340, MathMax(li_4, 1));
   for (int index_20 = 0; index_20 < li_4; index_20++) {
      gia_332[index_20] = lia_8[index_20];
      gia_332[index_20] = lia_8[index_20];
      gda_340[index_20] = lda_12[index_20];
   }
   gi_336 = li_4;
}

void CheckVersion() {
   if (IsTestingMode() != 1) {
      if (gi_644 == 0) {
         if (TimeCurrent() >= gi_656) {
            gi_656 = TimeCurrent() + 3600 * gi_652;
            EAVersion(gs_348, gi_356, gi_360, gi_364);
         }
      }
   }
}

void Registered() {
   string ls_unused_0;
   if (gi_644 != 0) {
      if (TimeCurrent() >= gi_648) {
         gi_648 = TimeCurrent() + 5 * (60 * gi_640);
         Print("registering with Advisor:" + gs_348 + " Account:" + AccountName() + "...");
         for (int count_8 = 0; count_8 < 4; count_8++) {
            gi_644 = UserRegister(gs_660, gs_348, AccountName());
            if (gi_644 != 4) break;
            Sleep(500);
         }
         if (gi_644 == 0) Print("You have registered");
      }
   }
}

int IsReallyConnected() {
   return (AccountServer() != "");
}

string SpreadToStr() {
   string dbl2str_0;
   double ld_8;
   if (gd_620 == 1.0) dbl2str_0 = DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0);
   else {
      ld_8 = MarketInfo(Symbol(), MODE_SPREAD) / gd_620;
      dbl2str_0 = DoubleToStr(ld_8, 1);
   }
   return (dbl2str_0);
}

string MaxSpreadToStr() {
   string dbl2str_0;
   if (gd_620 == 1.0) dbl2str_0 = DoubleToStr(MaxSpread, 0);
   else dbl2str_0 = DoubleToStr(MaxSpread, 1);
   return (dbl2str_0);
}

int IsTestingMode() {
   bool bool_0 = IsTesting() || IsOptimization() || IsVisualMode();
   return (bool_0);
}

string Errors(int ai_0) {
   string ls_4;
   string lsa_12[20];
   double ld_20;
   string ls_unused_28;
   if (gi_636 > TimeCurrent()) return ("");
   gi_636 = TimeCurrent() + 300;
   int index_16 = 0;
   if (ai_0 == 1 && IsTestingMode() == 1 && IsReallyConnected() == 0) {
      Print("The expert advisor is disabled to run in testing mode.");
      ls_4 = "Connection to the broker server MUST be established to provide correct test results.\n\n" + "Sorry, but the expert advisor will be disabled for using in testing mode.";
      lsa_12[index_16] = ls_4;
      index_16++;
   }
   if (IsExpertEnabled() == FALSE) {
      ls_4 = "Expert Advisors are disabled for running. Please change the setup and enable Expert Advisors usage.";
      lsa_12[index_16] = ls_4;
      index_16++;
   }
   if (Core1 == FALSE && Core2 == FALSE) {
      ls_4 = "All trading cores disabled. You need to enable at least one trading core. Please change the setup.";
      lsa_12[index_16] = ls_4;
      index_16++;
   }
   if (MoneyManagement == TRUE && RiskperTrade == 0.0) {
      ls_4 = "Incorrect Money Management setup. The following input parameters are not compatible: MoneyManagement = True, RiskperTrade = 0. Please change the setup.";
      lsa_12[index_16] = ls_4;
      index_16++;
   }
   if (MoneyManagement == FALSE && FixedLotSize == 0.0) {
      ls_4 = "Incorrect Money Management setup. The following input parameters are not compatible: MoneyManagement = False, FixedLotSize = 0. Please change the setup.";
      lsa_12[index_16] = ls_4;
      index_16++;
   }
   if (Period() != PERIOD_M30) {
      ls_4 = "Incorrect chart time frame. Place the EA Shark 6.0 on the EURUSD 30 Minutes (M30) chart.";
      lsa_12[index_16] = ls_4;
      index_16++;
   }
   if (StringSubstr(Symbol(), 0, 6) != "EURUSD") {
      ls_4 = "Incorrect chart. Place the EA Shark 6.0 on the EURUSD 30 Minutes (M30) chart.";
      lsa_12[index_16] = ls_4;
      index_16++;
   }
   if (MaxTrades == 0) {
      ls_4 = "Incorrect setup detected. MaxTrades = 0. Please change the setup.";
      lsa_12[index_16] = ls_4;
      index_16++;
   }
   if (MagicNumberCore1 == MagicNumberCore2) {
      ls_4 = "Conflict between magic numbers. Magic number for core 1 and core 2 cannot be the same. Please change the setup.";
      lsa_12[index_16] = ls_4;
      index_16++;
   }
   if (gi_644 != 0) {
      if (gi_644 == 1) {
         ls_4 = "Connection problem. Please contact our support desk at: support@forexeasystems.com for assistance.";
         lsa_12[index_16] = ls_4;
         index_16++;
      } else {
         if (gi_644 == 2) {
            ls_4 = "No license for this account. Please login to the user area and update the license records.";
            lsa_12[index_16] = ls_4;
            index_16++;
         } else {
            if (gi_644 == 3) {
               ls_4 = "Request problem. Please contact our support desk at: support@forexeasystems.com for assistance.";
               lsa_12[index_16] = ls_4;
               index_16++;
            } else {
               if (gi_644 == 4) {
                  ls_4 = "Bad response was received from our server. In most cases other software in your system (some kind of Web guard) blocks our HTTP requests/responses.";
                  lsa_12[index_16] = ls_4;
                  index_16++;
               } else {
                  ls_4 = "Unknown Error. Please contact our support desk at: support@forexeasystems.com for assistance.";
                  lsa_12[index_16] = ls_4;
                  index_16++;
               }
            }
         }
      }
   }
   if (!(ai_0 == 0) || !(IsTestingMode() == 1)) {
      ld_20 = MaxSpread * gd_620;
      if (ld_20 > 0.0 && ld_20 < MarketInfo(Symbol(), MODE_SPREAD)) {
         ls_4 = "Trading temporarily disabled because of high spread. Spread == " + MaxSpreadToStr() + " If this alert appears continuously you may need to adjust the MaxSpread input parameter.";
         Print(ls_4);
      }
   }
   return (Messages(lsa_12, index_16));
}

string Warnings() {
   string ls_0;
   string lsa_8[20];
   string ls_unused_16;
   int index_12 = 0;
   if (MagicNumberCore1 == 0) {
      ls_0 = "Magic number for core 1 = 0. If you use other Expert Advisors on the same account or use the account for manual trading you need to change the magic number. ";
      lsa_8[index_12] = ls_0;
      index_12++;
   }
   if (MagicNumberCore2 == 0) {
      ls_0 = "Magic number for core 2 = 0. If you use other Expert Advisors on the same account or use the account for manual trading you need to change the magic number. ";
      lsa_8[index_12] = ls_0;
      index_12++;
   }
   if (IsTestingMode() == 1 && Bars < 500) {
      ls_0 = "Incomplete historical data for chosen date range. Test will be processed with existing data. ";
      lsa_8[index_12] = ls_0;
      index_12++;
   }
   return (Messages(lsa_8, index_12));
}

string Codes() {
   int lia_0[20];
   int index_4 = 0;
   if (IsExpertEnabled() == FALSE) {
      lia_0[index_4] = 1;
      index_4++;
   }
   if (Core1 == FALSE && Core2 == FALSE) {
      lia_0[index_4] = 2;
      index_4++;
   }
   if (MoneyManagement == TRUE && RiskperTrade == 0.0) {
      lia_0[index_4] = 3;
      index_4++;
   }
   if (MoneyManagement == FALSE && FixedLotSize == 0.0) {
      lia_0[index_4] = 4;
      index_4++;
   }
   if (Period() != PERIOD_M30) {
      lia_0[index_4] = 5;
      index_4++;
   }
   if (StringSubstr(Symbol(), 0, 6) != "EURUSD") {
      lia_0[index_4] = 6;
      index_4++;
   }
   if (MaxTrades == 0) {
      lia_0[index_4] = 7;
      index_4++;
   }
   if (MagicNumberCore1 == MagicNumberCore2) {
      lia_0[index_4] = 8;
      index_4++;
   }
   if (gi_644 != 0) {
      if (gi_644 == 1) {
         lia_0[index_4] = 11;
         index_4++;
      } else {
         if (gi_644 == 2) {
            lia_0[index_4] = 12;
            index_4++;
         } else {
            if (gi_644 == 3) {
               lia_0[index_4] = 13;
               index_4++;
            } else {
               if (gi_644 == 4) {
                  lia_0[index_4] = 14;
                  index_4++;
               } else {
                  lia_0[index_4] = 15;
                  index_4++;
               }
            }
         }
      }
   }
   string ls_ret_8 = "";
   for (int index_16 = 0; index_16 < index_4; index_16++) {
      if (index_16 == index_4 - 1) ls_ret_8 = ls_ret_8 + lia_0[index_16];
      else ls_ret_8 = ls_ret_8 + lia_0[index_16] + ", ";
   }
   return (ls_ret_8);
}

string Messages(string asa_0[20], int ai_4) {
   string ls_ret_8 = "";
   if (ai_4 == 0) return (ls_ret_8);
   if (ai_4 == 1) {
      ls_ret_8 = asa_0[0] 
         + "\n" 
         + "\n" 
      + gs_376;
      return (ls_ret_8);
   }
   for (int index_16 = 0; index_16 < ai_4; index_16++) {
      ls_ret_8 = ls_ret_8 + asa_0[index_16];
      ls_ret_8 = ls_ret_8 
         + "\n" 
      + "\n";
      ls_ret_8 = ls_ret_8 + "------------------------------";
      ls_ret_8 = ls_ret_8 
         + "\n" 
      + "\n";
   }
   ls_ret_8 = ls_ret_8 + gs_376;
   return (ls_ret_8);
}

void setVSL(int ai_0, double ad_4) {
   for (int index_12 = 0; index_12 < gi_336; index_12++)
      if (gia_332[index_12] == ai_0) gda_340[index_12] = ad_4;
}

double getVSL(int ai_0) {
   double ld_ret_4 = 0.0;
   for (int index_12 = 0; index_12 < gi_336; index_12++)
      if (gia_332[index_12] == ai_0) ld_ret_4 = gda_340[index_12];
   return (ld_ret_4);
}
