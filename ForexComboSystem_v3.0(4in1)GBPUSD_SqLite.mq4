//|-----------------------------------------------------------------------------------------|
//|                                            ForexComboSystem_v3.0(4in1)GBPUSD_Sqlite.mq4 |
//|                                                            Copyright © 2012, Dennis Lee |
//| Assert History                                                                          |
//| 1.10    Added PlusGhost.                                                                |
//| 1.00    Generated by EX4 TO MQ4 decompile Service.                                      |
//|-----------------------------------------------------------------------------------------|
#property copyright "Copyright © 2012, Dennis Lee"
#property link      ""

#import "wininet.dll"
   int InternetOpenA(string a0, int a1, string a2, string a3, int a4);
   int InternetOpenUrlA(int a0, string a1, string a2, int a3, int a4, int a5);
   int InternetReadFile(int a0, string a1, int a2, int& a3[]);
   int InternetCloseHandle(int a0);
#import "FCS300.dll"
   int dllInit(int a0, int a1, int a2, int a3, int a4);
   int dllOpenCond1(int a0, double a1, double a2, double a3, double a4, double a5, double a6, int a7, int a8, int a9);
   int dllCloseCond1(int a0, double a1, double a2);
   int dllOpenCond2(int a0, double a1, double a2, double a3, double a4, double a5, double a6);
   int dllCloseCond2(int a0, double a1, double a2, double a3, double a4);
   int dllOpenCond3(int a0, double a1, double a2, double a3, double a4, double a5, double a6);
   int dllCloseCond3(int a0, double a1, double a2, double a3, double a4, double a5, double a6);
   int dllOpenCond4(int a0, int a1, int a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9);
   int dllCloseCond4(int a0, double a1, double a2, double a3, double a4);
   int dllParamInit1(int a0);
   int dllParamInit2(int a0);
   double dllExpTrailLong(double a0, double a1, double a2);
   double dllExpTrailShort(double a0, double a1, double a2);
   int dllGMTOffset();
#import

//--- Assert 2: Plus include files
#include <PlusTurtle.mqh>
#include <PlusGhost.mqh>
int   MaxAccountTrades = 4;

string gs_76 = "http://forex-combo.com/verify4in1.php";
bool gi_84 = FALSE;
extern string A = "====================";
extern bool Use_FXCOMBO_Scalping = TRUE;
extern bool Use_FXCOMBO_Breakout = TRUE;
extern bool Use_FXCOMBO_Reversal = TRUE;
extern bool Use_FXCOMBO_EuroRange = TRUE;
extern string B = "====================";
extern bool Use_ECN_Execution = TRUE;
extern bool Hidden_StopAndTarget = FALSE;
extern bool No_Hedge_Trades = FALSE;
extern bool NFA_Compatibility = FALSE;
extern string C = "====================";
extern string CommentSys1 = "*** 1 ***";
extern string CommentSys2 = "*** 2 ***";
extern string CommentSys3 = "*** 3 ***";
extern string CommentSys4 = "*** 4 ***";
extern string D = "====================";
extern int Magic1 = 121212;
extern int Magic2 = 232323;
extern int Magic3 = 454545;
extern int Magic4 = 565656;
extern string E = "====================";
extern double MaxSPREAD = 4.0;
extern int Slippage = 2;
extern bool AutoGMT_Offset = TRUE;
extern int ManualGMT_Offset = 2;
extern bool UseAgresiveMM = FALSE;
extern bool EMAIL_Notification = FALSE;
extern string MMSys1 = "==== FXCOMBO Scalping MM Parameters ====";
extern double LotsSys1 = 0.1;
extern double TradeMMSys1 = 0.0;
extern double LossFactorSys1 = 2.0;
int gi_268 = 0;
int gi_272 = 2;
int gi_276 = 0;
extern string MMSys2 = "==== FXCOMBO Breakout MM Parameters ====";
extern double LotsSys2 = 0.1;
extern double TradeMMSys2 = 0.0;
extern double LossFactorSys2 = 2.0;
int gi_312 = 0;
int gi_316 = 2;
int gi_320 = 0;
extern string MMSys3 = "==== FXCOMBO Reversal MM Parameters ====";
extern double LotsSys3 = 0.1;
extern double TradeMMSys3 = 0.0;
extern double LossFactorSys3 = 2.0;
int gi_356 = 0;
int gi_360 = 2;
int gi_364 = 0;
extern string MMSys4 = "==== FXCOMBO EuroRange MM Parameters ====";
extern double LotsSys4 = 0.1;
extern double TradeMMSys4 = 0.0;
extern double LossFactorSys4 = 2.0;
int gi_400 = 0;
int gi_404 = 2;
int gi_408 = 0;
extern string CommonMM = "==== Main MM Parameters ====";
extern double MMMax = 20.0;
extern double MaximalLots = 50.0;
extern string Scalping = "==== FXCOMBO Scalping System Parameters ====";
extern int StopLoss = 160;
extern int TakeProfit = 30;
int g_period_452 = 75;
extern int TREND_STR = 34;
int g_period_460 = 13;
extern int OSC_open = 6;
extern int OSC_close = 20;
int gi_472 = -5;
int gi_476 = 22;
int gi_480 = 22;
int gi_484 = 12;
extern string Breakout = "==== FXCOMBO Breakout System Parameters ====";
extern int TakeProfit_II = 85;
extern int StopLoss_II = 50;
extern int MaxPipsTrailing2 = 200;
extern int MinPipsTrailing2 = 20;
extern int Break = 12;
int g_period_516 = 1;
int g_period_520 = 19;
double gd_524 = 1.25;
extern double ATRTrailingFactor2 = 3.0;
int gi_540 = 60;
extern int F_TrailingProfit_II = 95;
extern int F_Trailing_II = 20;
extern bool Use_Exp_Trailing_II = TRUE;
extern double Exp_Trail_Factor_II = 0.49;
int g_timeframe_564 = PERIOD_M15;
int gi_568 = 30;
int gi_572 = 75;
int gi_576 = 5;
int gi_580 = 20;
int gi_584 = 17;
int gi_588 = 5;
int gi_592 = 19;
int gi_596 = 11;
int gi_600 = 7;
int gi_604 = 13;
int gi_608 = 9;
int gi_612 = 12;
int gi_616 = 22;
int gi_620 = 10;
int gi_624 = 14;
int gi_unused_628 = 16;
int gi_632 = 15;
int gi_636 = 5;
int gi_640 = 5;
extern string Reversal = "==== FXCOMBO Reversal System Parameters ====";
extern int BegHourSys_III = 23;
extern int EndHourSys_III = 0;
extern int TakeProfit_III = 100;
extern int StopLoss_III = 260;
int gi_668 = 300;
extern int MaxPipsTrailing3 = 60;
extern int MinPipsTrailing3 = 20;
int g_period_680 = 80;
double gd_684 = 15.0;
int g_period_692 = 9;
int gi_696 = -2;
int gi_700 = 40;
extern int F_TrailingProfit_III = 100;
extern int F_Trailing_III = 30;
extern bool Use_Exp_Trailing_III = TRUE;
extern double Exp_Trail_Factor_III = 0.36;
extern string EuroRange = "==== FXCOMBO EuroRange System Parameters ====";
int gi_732 = 5;
int gi_736 = 29;
extern int MaxRangePips = 100;
extern int BreakPips = -13;
extern double TargetPercent = 2.1;
extern int StopLoss_IV = 55;
int gi_760 = 300;
int gi_764 = 300;
int gi_768 = 5;
double gd_772 = 100.0;
extern int F_TrailingProfit_IV = 300;
extern int F_Trailing_IV = 30;
extern bool Use_Exp_Trailing_IV = TRUE;
extern double Exp_Trail_Factor_IV = 0.45;
extern int ReverseTF = 5;
extern int ExitProfit = 60;
bool gi_808 = TRUE;
string gs_812 = "";
string gs_820 = "";
int gi_828 = -1;
int gi_832 = 0;
double g_minlot_836 = 0.0;
double g_maxlot_844 = 0.0;
int g_leverage_852 = 0;
int g_lotsize_856 = 0;
double g_lotstep_860 = 0.0;
int g_datetime_868 = 0;
int g_datetime_872 = 0;
int g_datetime_876 = 0;
int gi_880;
int gi_884;
int gi_888 = 0;
int gi_892 = 1;
int gi_unused_896 = 3;
int gi_900 = 13;
int g_datetime_904 = 0;

int init() {
   gi_808 = TRUE;
   gi_84 = FALSE;
   Comment("");
   if (ObjectFind("klc") >= 0) ObjectDelete("klc");
   if (ObjectFind("klc2") >= 0) ObjectDelete("klc2");
   if (ObjectFind("klc3") >= 0) ObjectDelete("klc3");
//--- Assert 2: Init Plus   
   TurtleInit();
   GhostInit();
   return (0);
}

int deinit() {
//--- Assert 1: DeInit Plus
   GhostDeInit();
   Comment("");
   if (ObjectFind("klc") >= 0) ObjectDelete("klc");
   if (ObjectFind("klc2") >= 0) ObjectDelete("klc2");
   if (ObjectFind("klc3") >= 0) ObjectDelete("klc3");
   return (0);
}

int start() {
   double price_0;
   double price_8;
   double price_16;
   color color_32;
   string ls_48;
   int li_56;
   string ls_60;
   bool bool_68;
   bool bool_72;
   bool bool_76;
   double ld_88;
   int li_272;
   int li_276;
   int li_280;
   int li_284;
   int li_288;
   int li_292;
   int li_296;
   int ticket_440;
   int ticket_444;
   int ticket_448;
   int ticket_452;
   double price_460;
   double price_468;
   double price_476;
   double price_484;
   double ld_492;
   double price_500;
   double price_508;
   double price_516;
   double ld_524;
   double price_532;
   double price_540;
   double price_548;
   string ls_604;
   double ld_40 = 1;
   if (gi_808) {
      gi_808 = FALSE;
      g_minlot_836 = MarketInfo(Symbol(), MODE_MINLOT);
      g_maxlot_844 = MarketInfo(Symbol(), MODE_MAXLOT);
      g_leverage_852 = AccountLeverage();
      g_lotsize_856 = MarketInfo(Symbol(), MODE_LOTSIZE);
      g_lotstep_860 = MarketInfo(Symbol(), MODE_LOTSTEP);
      gi_828 = -1;
   }
   if ((!IsTesting()) && IsStopped()) return (0);
   if ((!IsTesting()) && !IsTradeAllowed()) {
      Comment("Trading server: Trading is not Allowed ...");
      return (0);
   }
   if ((!IsTesting()) && IsTradeContextBusy()) {
      Comment("Trading server: Trade Context is Busy ...");
      return (0);
   }
   if (iATR(NULL, PERIOD_M5, 1, 1) < Point / 2.0) return (0);
   if (IsDllsAllowed() == FALSE) {
      Comment("Warning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
      Print("Warning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
      Alert("Warning: Set Parameter **AllowDLL Imports** ON in menu Tools -> Options -> ExpertAdvisors.");
      Sleep(30000);
      return (0);
   }
   if ((!gi_84) && !IsTesting()) {
      if (IsDemo() == FALSE) ls_60 = "AccountType=2";
      else ls_60 = "AccountType=1";
      if (f0_10(gs_76 + "?AccountId=" + DoubleToStr(AccountNumber(), 0) + "&" + ls_60, ls_48)) {
         if (StringTrimRight(StringTrimLeft(f0_9(ls_48, 0, "<result>", "</result>", li_56))) == "OK") gi_84 = TRUE;
         else {
            Comment("Online validation is not passed. For more information, contact us at support@forex-combo.com!");
            Alert("Online validation is not passed. For more information, contact us at support@forex-combo.com!");
            Sleep(30000);
            return (0);
         }
      } else {
         Comment("\n Online validation failed (error number " + DoubleToStr(GetLastError(), 0) + "). Visit www.fxautomater.com for more information!");
         Alert("Online validation failed (error number " + DoubleToStr(GetLastError(), 0) + "). Visit www.fxautomater.com for more information!");
         Sleep(30000);
         return (0);
      }
   }
   if (gi_828 <= 0) {
      gi_828 = f0_21(AccountNumber(), IsTesting(), IsDemo(), WindowHandle(Symbol(), Period()), TimeCurrent());
      if (!IsTesting() && AutoGMT_Offset == TRUE) gi_832 = f0_15();
      else gi_832 = ManualGMT_Offset;
   }
   if (gi_828 <= 0 && gi_84 && (!IsTesting())) {
      Comment("DLL initialization is failed (" + DoubleToStr(gi_828, 0) + "). For more information, contact us at support@forex-combo.com!");
      Alert("DLL initialization is failed (" + DoubleToStr(gi_828, 0) + "). For more information, contact us at support@forex-combo.com!");
      Sleep(10000);
      return (0);
   }
   if (gi_828 <= 0 && IsTesting()) Print("DLL initialization is failed (" + DoubleToStr(gi_828, 0) + "). Please register you test account at forex-combo.com!");
   int stoplevel_80 = MarketInfo(Symbol(), MODE_STOPLEVEL);
   bool li_84 = TRUE;
   if (stoplevel_80 == 0 || Use_ECN_Execution == TRUE || Hidden_StopAndTarget == TRUE) li_84 = FALSE;
   if (Digits <= 3) ld_88 = 0.01;
   else ld_88 = 0.0001;
   double ld_96 = NormalizeDouble((Ask - Bid) / ld_88, 1);
   string ls_104 = "*** SPREAD OK ***";
   if (ld_96 > MaxSPREAD) ls_104 = "*** SPREAD IS TOO HIGH ***";
   gs_812 = "\n\n   Greenwich Mean Time : " + TimeToStr(TimeCurrent() - 3600 * gi_832, TIME_DATE|TIME_MINUTES|TIME_SECONDS) 
   + "\n   Broker Time : " + TimeToStr(TimeCurrent(), TIME_DATE|TIME_MINUTES|TIME_SECONDS);
   string ls_112 = "FX COMBO is running on your account - Validation OK";
   string ls_120 = "FX COMBO is set up for time zone GMT " + gi_832;
   string ls_128 = "Spread= " + DoubleToStr(ld_96, 1) + " pips";
   string ls_136 = "Account Balance= " + DoubleToStr(GhostAccountBalance(), 2);
   string ls_144 = ls_104;
//--- Assert 2: Refresh Plus   
   GhostRefresh();
   Comment(GhostComment("\n\n\n\n\n   " + ls_112 + " \n   " + ls_120 + " \n   " + ls_128 + " \n   " + ls_136 + " \n\n   " + ls_144 + " " + gs_812 + " " + gs_820 + "\n"));
   ObjectCreate("klc", OBJ_LABEL, 0, 0, 0);
   ObjectSetText("klc", "  ** FOREX COMBO SYSTEM 4 in 1 **", 9, "System", Red);
   ObjectSet("klc", OBJPROP_CORNER, 0);
   ObjectSet("klc", OBJPROP_XDISTANCE, 0);
   ObjectSet("klc", OBJPROP_YDISTANCE, 29);
   ObjectCreate("klc3", OBJ_LABEL, 0, 0, 0);
   ObjectSetText("klc3", "   Copyright � www.fxautomater.com ", 9, "System", Gray);
   ObjectSet("klc3", OBJPROP_CORNER, 0);
   ObjectSet("klc3", OBJPROP_XDISTANCE, 0);
   ObjectSet("klc3", OBJPROP_YDISTANCE, 45);
   if (UseAgresiveMM != TRUE) {
      LossFactorSys1 = 1;
      LossFactorSys2 = 1;
      LossFactorSys3 = 1;
      LossFactorSys4 = 1;
   }
   HideTestIndicators(TRUE);
   double iclose_152 = iClose(NULL, PERIOD_M15, 1);
   double ima_160 = iMA(NULL, PERIOD_M15, g_period_452, 0, MODE_SMMA, PRICE_CLOSE, 1);
   double iwpr_168 = iWPR(NULL, PERIOD_M15, g_period_460, 1);
   double iatr_176 = iATR(NULL, PERIOD_H1, g_period_520, 1);
   double ima_184 = iMA(NULL, PERIOD_H1, g_period_516, 0, MODE_EMA, PRICE_CLOSE, 1);
   double ld_192 = ima_184 + iatr_176 * gd_524;
   double ld_200 = ima_184 - iatr_176 * gd_524;
   double iclose_208 = iClose(NULL, g_timeframe_564, 1);
   double iatr_216 = iATR(NULL, PERIOD_M5, g_period_680, 1);
   double ihigh_224 = iHigh(NULL, PERIOD_H1, 1);
   double ilow_232 = iLow(NULL, PERIOD_H1, 1);
   double ibands_240 = iBands(NULL, PERIOD_H1, g_period_692, 2, 0, PRICE_CLOSE, MODE_UPPER, 1);
   double ibands_248 = iBands(NULL, PERIOD_H1, g_period_692, 2, 0, PRICE_CLOSE, MODE_LOWER, 1);
   HideTestIndicators(FALSE);
   double ihigh_256 = iHigh(NULL, PERIOD_H1, iHighest(NULL, PERIOD_H1, MODE_HIGH, gi_732, 1));
   double ilow_264 = iLow(NULL, PERIOD_H1, iLowest(NULL, PERIOD_H1, MODE_LOW, gi_732, 1));
   if (gi_476 < 0) f0_17(gi_476, gi_480);
   if (gi_580 < 0) f0_7(gi_580, gi_584, gi_588, gi_592, gi_596, gi_600, gi_604, gi_608, gi_612, gi_616, gi_620, gi_624);
   if (TakeProfit < stoplevel_80 * Point / ld_88) li_272 = stoplevel_80 * Point / ld_88;
   else li_272 = TakeProfit;
   if (StopLoss < stoplevel_80 * Point / ld_88) li_276 = stoplevel_80 * Point / ld_88;
   else li_276 = StopLoss;
   if (TakeProfit_II < stoplevel_80 * Point / ld_88) li_280 = stoplevel_80 * Point / ld_88;
   else li_280 = TakeProfit_II;
   if (StopLoss_II < stoplevel_80 * Point / ld_88) li_284 = stoplevel_80 * Point / ld_88;
   else li_284 = StopLoss_II;
   if (TakeProfit_III < stoplevel_80 * Point / ld_88) li_288 = stoplevel_80 * Point / ld_88;
   else li_288 = TakeProfit_III;
   if (StopLoss_III < stoplevel_80 * Point / ld_88) li_292 = stoplevel_80 * Point / ld_88;
   else li_292 = StopLoss_III;
   if (StopLoss_IV < stoplevel_80 * Point / ld_88) li_296 = stoplevel_80 * Point / ld_88;
   else li_296 = StopLoss_IV;
   int li_300 = gi_476 + gi_832;
   int li_304 = gi_476 + gi_832;
   int li_308 = BegHourSys_III + gi_832;
   int li_312 = EndHourSys_III + gi_832;
   if (li_300 > 23) li_300 -= 24;
   if (li_300 < 0) li_300 += 24;
   if (li_308 > 23) li_308 -= 24;
   if (li_308 < 0) li_308 += 24;
   if (li_304 > 23) li_304 -= 24;
   if (li_304 < 0) li_304 += 24;
   if (li_312 > 23) li_312 -= 24;
   if (li_312 < 0) li_312 += 24;
   int li_316 = gi_580 + gi_832;
   int li_320 = gi_584 + gi_832;
   int li_324 = gi_588 + gi_832;
   int li_328 = gi_592 + gi_832;
   int li_332 = gi_596 + gi_832;
   int li_336 = gi_600 + gi_832;
   int li_340 = gi_604 + gi_832;
   int li_344 = gi_608 + gi_832;
   int li_348 = gi_612 + gi_832;
   int li_352 = gi_616 + gi_832;
   int li_356 = gi_620 + gi_832;
   int li_360 = gi_624 + gi_832;
   int li_364 = gi_588 + gi_832;
   int li_368 = gi_632 + gi_832;
   int li_372 = gi_636 + gi_832;
   int li_376 = gi_640 + gi_832;
   if (li_316 > 23) li_316 -= 24;
   if (li_316 < 0) li_316 += 24;
   if (li_320 > 23) li_320 -= 24;
   if (li_320 < 0) li_320 += 24;
   if (li_324 > 23) li_324 -= 24;
   if (li_324 < 0) li_324 += 24;
   if (li_328 > 23) li_328 -= 24;
   if (li_328 < 0) li_328 += 24;
   if (li_332 > 23) li_332 -= 24;
   if (li_332 < 0) li_332 += 24;
   if (li_336 > 23) li_336 -= 24;
   if (li_336 < 0) li_336 += 24;
   if (li_340 > 23) li_340 -= 24;
   if (li_340 < 0) li_340 += 24;
   if (li_344 > 23) li_344 -= 24;
   if (li_344 < 0) li_344 += 24;
   if (li_348 > 23) li_348 -= 24;
   if (li_348 < 0) li_348 += 24;
   if (li_352 > 23) li_352 -= 24;
   if (li_352 < 0) li_352 += 24;
   if (li_356 > 23) li_356 -= 24;
   if (li_356 < 0) li_356 += 24;
   if (li_360 > 23) li_360 -= 24;
   if (li_360 < 0) li_360 += 24;
   if (li_364 > 23) li_364 -= 24;
   if (li_364 < 0) li_364 += 24;
   if (li_368 > 23) li_368 -= 24;
   if (li_368 < 0) li_368 += 24;
   if (li_372 > 23) li_372 -= 24;
   if (li_372 < 0) li_372 += 24;
   if (li_376 > 23) li_376 -= 24;
   if (li_376 < 0) li_376 += 24;
   int slippage_380 = Slippage * (ld_88 / Point);
   int count_384 = 0;
   int count_388 = 0;
   int count_392 = 0;
   int count_396 = 0;
   int count_400 = 0;
   int count_404 = 0;
   int count_408 = 0;
   int count_412 = 0;
   int datetime_416 = g_datetime_868;
   int li_420 = g_datetime_868 + gi_540;
   int datetime_424 = g_datetime_872;
   int li_428 = g_datetime_872 + gi_668;
   int datetime_432 = g_datetime_876;
   int li_436 = g_datetime_876 + gi_760;
//--- Assert 9: Declare variables
   int      aCommand[];    // 1-OrderModify BUY; 2-OrderClose BUY; 3-OrderModify SELL; 4-OrderClose SELL;
   int      aTicket[];
   double   aLots[];
   double   aOpenPrice[];
   double   aStopLoss[];
   double   aTakeProfit[];
   int      aMagicNumber[];
   bool     aOk[];
   int      aCount;
//--- Assert 8: Dynamically resize arrays
   ArrayResize(aCommand,MaxAccountTrades);
   ArrayResize(aTicket,MaxAccountTrades);
   ArrayResize(aLots,MaxAccountTrades);
   ArrayResize(aOpenPrice,MaxAccountTrades);
   ArrayResize(aStopLoss,MaxAccountTrades);
   ArrayResize(aTakeProfit,MaxAccountTrades);
   ArrayResize(aMagicNumber,MaxAccountTrades);
   ArrayResize(aOk,MaxAccountTrades);
//--- Assert 2: Init OrderSelect #1
   int      aTotal = GhostOrdersTotal();
   GhostInitSelect(false,0,SELECT_BY_POS,MODE_TRADES);
   for (int pos_456 = aTotal - 1; pos_456 >= 0; pos_456--) {
      if (!GhostOrderSelect(pos_456, SELECT_BY_POS, MODE_TRADES)) Print("Error in OrderSelect! Position:", pos_456);
      else {
      //--- Assert 7: Populate arrays
         aCommand[aCount]     =  0;
         aTicket[aCount]      =  GhostOrderTicket();
         aLots[aCount]        =  GhostOrderLots();
         aOpenPrice[aCount]   =  GhostOrderOpenPrice();
         aStopLoss[aCount]    =  GhostOrderStopLoss();
         aTakeProfit[aCount]  =  GhostOrderTakeProfit();
         aMagicNumber[aCount] =  GhostOrderMagicNumber();
         if (GhostOrderType() <= OP_SELL && GhostOrderSymbol() == Symbol()) {
            if (GhostOrderMagicNumber() == Magic1) {
               if (GhostOrderType() == OP_BUY) {
                  if (GhostOrderStopLoss() == 0.0 && Hidden_StopAndTarget == FALSE) {
                     price_460 = NormalizeDouble(GhostOrderOpenPrice() - li_276 * ld_88, Digits);
                     price_468 = NormalizeDouble(GhostOrderOpenPrice() + li_272 * ld_88, Digits);
                  //--- 5: Assert replace OrderModify a buy trade with arrays
                     aCommand[aCount]     = 1; 
                     aStopLoss[aCount]    = price_460;
                     aTakeProfit[aCount]  = price_468;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderModify(OrderTicket(), OrderOpenPrice(), price_460, price_468, 0, Green);*/
                  }
                  if ((f0_20(gi_828, iwpr_168, OSC_close) == 0 && Bid > iclose_152 + gi_472 * ld_88) || Bid >= GhostOrderOpenPrice() + li_272 * ld_88 || Bid <= GhostOrderOpenPrice() - li_276 * ld_88) {
                     RefreshRates();
                  //--- 3: Assert replace OrderClose a buy trade with arrays
                     aCommand[aCount]  = 2;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), slippage_380, Violet);*/
                     Sleep(5000);
                  } else count_384++;
               } else {
                  if (GhostOrderStopLoss() == 0.0 && Hidden_StopAndTarget == FALSE) {
                     price_460 = NormalizeDouble(GhostOrderOpenPrice() + li_276 * ld_88, Digits);
                     price_468 = NormalizeDouble(GhostOrderOpenPrice() - li_272 * ld_88, Digits);
                  //--- 5: Assert replace OrderModify a sell trade with arrays
                     aCommand[aCount]     = 3; 
                     aStopLoss[aCount]    = price_460;
                     aTakeProfit[aCount]  = price_468;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderModify(OrderTicket(), OrderOpenPrice(), price_460, price_468, 0, Green);*/
                  }
                  if ((f0_20(gi_828, iwpr_168, OSC_close) == 1 && Bid < iclose_152 - gi_472 * ld_88) || Ask <= GhostOrderOpenPrice() - li_272 * ld_88 || Ask >= GhostOrderOpenPrice() + li_276 * ld_88) {
                     RefreshRates();
                  //--- 3: Assert replace OrderClose a sell trade with arrays
                     aCommand[aCount]  = 4;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), slippage_380, Violet);*/
                     Sleep(5000);
                  } else count_388++;
               }
            }
            if (GhostOrderMagicNumber() == Magic2) {
               if (GhostOrderType() == OP_BUY) {
                  if (GhostOrderStopLoss() == 0.0 && Hidden_StopAndTarget == FALSE) {
                     price_476 = NormalizeDouble(GhostOrderOpenPrice() - li_284 * ld_88, Digits);
                     price_484 = NormalizeDouble(GhostOrderOpenPrice() + li_280 * ld_88, Digits);
                  //--- 5: Assert replace OrderModify a buy trade with arrays
                     aCommand[aCount]     = 1; 
                     aStopLoss[aCount]    = price_476;
                     aTakeProfit[aCount]  = price_484;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderModify(OrderTicket(), OrderOpenPrice(), price_476, price_484, 0, Green);*/
                  }
                  if ((f0_22(gi_828, iclose_208, ld_200, ld_192, Break * ld_88) == 0 && TimeCurrent() - GhostOrderOpenTime() > 3600) || Bid >= GhostOrderOpenPrice() + li_280 * ld_88 || Bid <= GhostOrderOpenPrice() - li_284 * ld_88) {
                     RefreshRates();
                  //--- 3: Assert replace OrderClose a buy trade with arrays
                     aCommand[aCount]  = 2;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), slippage_380, Violet);*/
                     Sleep(5000);
                  } else count_392++;
                  if (TimeCurrent() >= li_420) {
                     if (Use_Exp_Trailing_II) {
                        ld_492 = f0_8(Exp_Trail_Factor_II * ld_88, GhostOrderOpenPrice(), iHigh(NULL, PERIOD_M5, iHighest(NULL, PERIOD_M5, MODE_HIGH, iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) +
                           1, 0)));
                     } else ld_492 = iatr_176 * ATRTrailingFactor2;
                     if (ld_492 > MaxPipsTrailing2 * ld_88) ld_492 = MaxPipsTrailing2 * ld_88;
                     if (ld_492 < MinPipsTrailing2 * ld_88) ld_492 = MinPipsTrailing2 * ld_88;
                     if (Bid - GhostOrderOpenPrice() > F_TrailingProfit_II * ld_88 && (!Use_Exp_Trailing_II)) ld_492 = F_Trailing_II * ld_88;
                     price_500 = NormalizeDouble(Bid - ld_492, Digits);
                     if (Hidden_StopAndTarget) {
                        if (TimeCurrent() - GhostOrderOpenTime() > 60 && Bid <= MathMax(GhostOrderOpenPrice() - li_284 * ld_88, iHigh(NULL, PERIOD_M5, iHighest(NULL, PERIOD_M5, MODE_HIGH, iBarShift(NULL,
                           PERIOD_M5, GhostOrderOpenTime()) + 1, 0)) - ld_492) && iHigh(NULL, PERIOD_M5, iHighest(NULL, PERIOD_M5, MODE_HIGH, iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) + 1, 0)) - GhostOrderOpenPrice() > ld_492) {
                           RefreshRates();
                        //--- 3: Assert replace OrderClose a buy trade with arrays
                           aCommand[aCount]  = 2;
                           aCount ++;
                           if( aCount >= MaxAccountTrades ) break;
                           /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), slippage_380, Violet);*/
                           Sleep(5000);
                        }
                     } else {
                        if (Bid - GhostOrderOpenPrice() > ld_492) {
                           if (GhostOrderStopLoss() <= price_500 - Point) {
                           //--- 5: Assert replace OrderModify a buy trade with arrays
                              aCommand[aCount]     = 1; 
                              aStopLoss[aCount]    = price_500;
                              aOk[aCount]          = true;
                              aCount ++;
                              if( aCount >= MaxAccountTrades ) break;
                              /*bool_68 = OrderModify(OrderTicket(), OrderOpenPrice(), price_500, OrderTakeProfit(), 0, Blue);
                              if (bool_68) {
                                 datetime_416 = TimeCurrent();
                                 g_datetime_868 = datetime_416;
                              }*/
                           }
                        }
                     }
                  }
               } else {
                  if (GhostOrderStopLoss() == 0.0 && Hidden_StopAndTarget == FALSE) {
                     price_476 = NormalizeDouble(GhostOrderOpenPrice() + li_284 * ld_88, Digits);
                     price_484 = NormalizeDouble(GhostOrderOpenPrice() - li_280 * ld_88, Digits);
                  //--- 5: Assert replace OrderModify a sell trade with arrays
                     aCommand[aCount]     = 3; 
                     aStopLoss[aCount]    = price_476;
                     aTakeProfit[aCount]  = price_484;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderModify(OrderTicket(), OrderOpenPrice(), price_476, price_484, 0, Green);*/
                  }
                  if ((f0_22(gi_828, iclose_208, ld_200, ld_192, Break * ld_88) == 1 && TimeCurrent() - GhostOrderOpenTime() > 3600) || Ask <= GhostOrderOpenPrice() - li_280 * ld_88 || Ask >= GhostOrderOpenPrice() +
                     li_284 * ld_88) {
                     RefreshRates();
                  //--- 3: Assert replace OrderClose a sell trade with arrays
                     aCommand[aCount]  = 4;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), slippage_380, Violet);*/
                     Sleep(5000);
                  } else count_396++;
                  if (TimeCurrent() >= li_420) {
                     if (Use_Exp_Trailing_II) {
                        ld_492 = f0_14(Exp_Trail_Factor_II * ld_88, GhostOrderOpenPrice(), iLow(NULL, PERIOD_M5, iLowest(NULL, PERIOD_M5, MODE_LOW, iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) +
                           1, 0)) + Ask - Bid);
                     } else ld_492 = iatr_176 * ATRTrailingFactor2;
                     if (ld_492 > MaxPipsTrailing2 * ld_88) ld_492 = MaxPipsTrailing2 * ld_88;
                     if (ld_492 < MinPipsTrailing2 * ld_88) ld_492 = MinPipsTrailing2 * ld_88;
                     if (GhostOrderOpenPrice() - Ask > F_TrailingProfit_II * ld_88 && (!Use_Exp_Trailing_II)) ld_492 = F_Trailing_II * ld_88;
                     price_500 = NormalizeDouble(Ask + ld_492, Digits);
                     if (Hidden_StopAndTarget) {
                        if (TimeCurrent() - GhostOrderOpenTime() > 60 && Ask >= Ask - Bid + MathMin(GhostOrderOpenPrice() + li_284 * ld_88, iLow(NULL, PERIOD_M5, iLowest(NULL, PERIOD_M5, MODE_LOW,
                           iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) + 1, 0)) + ld_492) && GhostOrderOpenPrice() - (iLow(NULL, PERIOD_M5, iLowest(NULL, PERIOD_M5, MODE_LOW, iBarShift(NULL, PERIOD_M5,
                           GhostOrderOpenTime()) + 1, 0)) + Ask - Bid) > ld_492) {
                           RefreshRates();
                        //--- 3: Assert replace OrderClose a sell trade with arrays
                           aCommand[aCount]  = 4;
                           aCount ++;
                           if( aCount >= MaxAccountTrades ) break;
                           /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), slippage_380, Violet);*/
                           Sleep(5000);
                        }
                     } else {
                        if (GhostOrderOpenPrice() - Ask > ld_492) {
                           if (GhostOrderStopLoss() >= price_500 + Point) {
                           //--- 5: Assert replace OrderModify a sell trade with arrays
                              aCommand[aCount]     = 3; 
                              aStopLoss[aCount]    = price_500;
                              aOk[aCount]          = true;
                              aCount ++;
                              if( aCount >= MaxAccountTrades ) break;
                              /*bool_68 = OrderModify(OrderTicket(), OrderOpenPrice(), price_500, OrderTakeProfit(), 0, Red);
                              if (bool_68) {
                                 datetime_416 = TimeCurrent();
                                 g_datetime_868 = datetime_416;
                              }*/
                           }
                        }
                     }
                  }
               }
            }
            if (GhostOrderMagicNumber() == Magic3) {
               if (GhostOrderType() == OP_BUY) {
                  if (GhostOrderStopLoss() == 0.0 && Hidden_StopAndTarget == FALSE) {
                     price_508 = NormalizeDouble(GhostOrderOpenPrice() - li_292 * ld_88, Digits);
                     price_516 = NormalizeDouble(GhostOrderOpenPrice() + li_288 * ld_88, Digits);
                  //--- 5: Assert replace OrderModify a buy trade with arrays
                     aCommand[aCount]     = 1; 
                     aStopLoss[aCount]    = price_508;
                     aTakeProfit[aCount]  = price_516;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderModify(OrderTicket(), OrderOpenPrice(), price_508, price_516, 0, Green);*/
                  }
                  if (((li_308 <= li_312 && TimeHour(TimeCurrent()) >= li_308 && TimeHour(TimeCurrent()) <= li_312) || (li_308 > li_312 && TimeHour(TimeCurrent()) >= li_308 || TimeHour(TimeCurrent()) <= li_312) &&
                     f0_18(gi_828, ibands_240, ibands_248, gi_700 * ld_88, ihigh_224, ilow_232, gi_696 * ld_88) == 0 && TimeCurrent() - GhostOrderOpenTime() > 7200) || Bid >= GhostOrderOpenPrice() +
                     li_288 * ld_88 || Bid <= GhostOrderOpenPrice() - li_292 * ld_88) {
                     RefreshRates();
                  //--- 3: Assert replace OrderClose a buy trade with arrays
                     aCommand[aCount]  = 2;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), slippage_380, Violet);*/
                     Sleep(5000);
                  } else count_400++;
                  if (TimeCurrent() >= li_428) {
                     if (Use_Exp_Trailing_III) {
                        ld_524 = Exp_Trail_Factor_III * ld_88 / MathMax(ld_88, iHigh(NULL, PERIOD_M5, iHighest(NULL, PERIOD_M5, MODE_HIGH, iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) + 1,
                           0)) - GhostOrderOpenPrice());
                     } else ld_524 = iatr_216 * gd_684;
                     if (ld_524 > MaxPipsTrailing3 * ld_88) ld_524 = MaxPipsTrailing3 * ld_88;
                     if (ld_524 < MinPipsTrailing3 * ld_88) ld_524 = MinPipsTrailing3 * ld_88;
                     if (Bid - GhostOrderOpenPrice() > F_TrailingProfit_III * ld_88 && (!Use_Exp_Trailing_III)) ld_524 = F_Trailing_III * ld_88;
                     price_532 = NormalizeDouble(Bid - ld_524, Digits);
                     if (Hidden_StopAndTarget) {
                        if (TimeCurrent() - GhostOrderOpenTime() > 300 && Bid <= MathMax(GhostOrderOpenPrice() - li_292 * ld_88, iHigh(NULL, PERIOD_M5, iHighest(NULL, PERIOD_M5, MODE_HIGH, iBarShift(NULL,
                           PERIOD_M5, GhostOrderOpenTime()) + 1, 0)) - ld_524) && iHigh(NULL, PERIOD_M5, iHighest(NULL, PERIOD_M5, MODE_HIGH, iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) + 1, 0)) - GhostOrderOpenPrice() > ld_524) {
                           RefreshRates();
                        //--- 3: Assert replace OrderClose a buy trade with arrays
                           aCommand[aCount]  = 2;
                           aCount ++;
                           if( aCount >= MaxAccountTrades ) break;
                           /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), slippage_380, Violet);*/
                           Sleep(5000);
                        }
                     } else {
                        if (Bid - GhostOrderOpenPrice() > ld_524) {
                           if (GhostOrderStopLoss() <= price_532 - Point) {
                           //--- 5: Assert replace OrderModify a buy trade with arrays
                              aCommand[aCount]     = 1; 
                              aStopLoss[aCount]    = price_532;
                              aOk[aCount]          = true;
                              aCount ++;
                              if( aCount >= MaxAccountTrades ) break;
                              /*bool_72 = OrderModify(OrderTicket(), OrderOpenPrice(), price_532, OrderTakeProfit(), 0, Blue);
                              if (bool_72) {
                                 datetime_424 = TimeCurrent();
                                 g_datetime_872 = datetime_424;
                              }*/
                           }
                        }
                     }
                  }
               } else {
                  if (GhostOrderStopLoss() == 0.0 && Hidden_StopAndTarget == FALSE) {
                     price_508 = NormalizeDouble(GhostOrderOpenPrice() + li_292 * ld_88, Digits);
                     price_516 = NormalizeDouble(GhostOrderOpenPrice() - li_288 * ld_88, Digits);
                  //--- 5: Assert replace OrderModify a sell trade with arrays
                     aCommand[aCount]     = 3; 
                     aStopLoss[aCount]    = price_508;
                     aTakeProfit[aCount]  = price_516;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderModify(OrderTicket(), OrderOpenPrice(), price_508, price_516, 0, Green);*/
                  }
                  if (((li_308 <= li_312 && TimeHour(TimeCurrent()) >= li_308 && TimeHour(TimeCurrent()) <= li_312) || (li_308 > li_312 && TimeHour(TimeCurrent()) >= li_308 || TimeHour(TimeCurrent()) <= li_312) &&
                     f0_18(gi_828, ibands_240, ibands_248, gi_700 * ld_88, ihigh_224, ilow_232, gi_696 * ld_88) == 1 && TimeCurrent() - GhostOrderOpenTime() > 7200) || Ask <= GhostOrderOpenPrice() - li_288 * ld_88 ||
                     Ask >= GhostOrderOpenPrice() + li_292 * ld_88) {
                     RefreshRates();
                  //--- 3: Assert replace OrderClose a sell trade with arrays
                     aCommand[aCount]  = 4;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), slippage_380, Violet);*/
                     Sleep(5000);
                  } else count_404++;
                  if (TimeCurrent() >= li_428) {
                     if (Use_Exp_Trailing_III) {
                        ld_524 = Exp_Trail_Factor_III * ld_88 / MathMax(ld_88, GhostOrderOpenPrice() - (iLow(NULL, PERIOD_M5, iLowest(NULL, PERIOD_M5, MODE_LOW, iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) +
                           1, 0)) + Ask - Bid));
                     } else ld_524 = iatr_216 * gd_684;
                     if (ld_524 > MaxPipsTrailing3 * ld_88) ld_524 = MaxPipsTrailing3 * ld_88;
                     if (ld_524 < MinPipsTrailing3 * ld_88) ld_524 = MinPipsTrailing3 * ld_88;
                     if (GhostOrderOpenPrice() - Ask > F_TrailingProfit_III * ld_88 && (!Use_Exp_Trailing_III)) ld_524 = F_Trailing_III * ld_88;
                     price_532 = NormalizeDouble(Ask + ld_524, Digits);
                     if (Hidden_StopAndTarget) {
                        if (TimeCurrent() - GhostOrderOpenTime() > 300 && Ask >= Ask - Bid + MathMin(GhostOrderOpenPrice() + li_292 * ld_88, iLow(NULL, PERIOD_M5, iLowest(NULL, PERIOD_M5, MODE_LOW,
                           iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) + 1, 0)) + ld_524) && GhostOrderOpenPrice() - (iLow(NULL, PERIOD_M5, iLowest(NULL, PERIOD_M5, MODE_LOW, iBarShift(NULL, PERIOD_M5,
                           GhostOrderOpenTime()) + 1, 0)) + Ask - Bid) > ld_524) {
                           RefreshRates();
                        //--- 3: Assert replace OrderClose a sell trade with arrays
                           aCommand[aCount]  = 4;
                           aCount ++;
                           if( aCount >= MaxAccountTrades ) break;
                           /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), slippage_380, Violet);*/
                           Sleep(5000);
                        }
                     } else {
                        if (GhostOrderOpenPrice() - Ask > ld_524) {
                           if (GhostOrderStopLoss() >= price_532 + Point) {
                           //--- 5: Assert replace OrderModify a sell trade with arrays
                              aCommand[aCount]     = 3; 
                              aStopLoss[aCount]    = price_532;
                              aOk[aCount]          = true;
                              aCount ++;
                              if( aCount >= MaxAccountTrades ) break;
                              /*bool_72 = OrderModify(OrderTicket(), OrderOpenPrice(), price_532, OrderTakeProfit(), 0, Red);
                              if (bool_72) {
                                 datetime_424 = TimeCurrent();
                                 g_datetime_872 = datetime_424;
                              }*/
                           }
                        }
                     }
                  }
               }
            }
            if (GhostOrderMagicNumber() == Magic4) {
               if (GhostOrderType() == OP_BUY) {
                  if (GhostOrderStopLoss() == 0.0 && Hidden_StopAndTarget == FALSE) {
                     price_540 = NormalizeDouble(ilow_264 - li_296 * ld_88, Digits);
                     price_548 = NormalizeDouble(GhostOrderOpenPrice() + (ihigh_256 - ilow_264) * TargetPercent, Digits);
                  //--- 5: Assert replace OrderModify a buy trade with arrays
                     aCommand[aCount]     = 1; 
                     aStopLoss[aCount]    = price_540;
                     aTakeProfit[aCount]  = price_548;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderModify(OrderTicket(), OrderOpenPrice(), price_540, price_548, 0, Green);*/
                  }
                  if (TimeCurrent() - GhostOrderOpenTime() > 300 && f0_13(gi_828, iClose(NULL, ReverseTF, 1), iOpen(NULL, ReverseTF, 1), Bid - GhostOrderOpenPrice(), ExitProfit * ld_88) == 0) {
                     RefreshRates();
                  //--- 3: Assert replace OrderClose a buy trade with arrays
                     aCommand[aCount]  = 2;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), slippage_380, Violet);*/
                     Sleep(5000);
                  } else count_408++;
                  if (TimeCurrent() < li_436) continue;
                  if (Use_Exp_Trailing_IV) {
                     ld_524 = Exp_Trail_Factor_IV * ld_88 / MathMax(ld_88, iHigh(NULL, PERIOD_M5, iHighest(NULL, PERIOD_M5, MODE_HIGH, iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) + 1,
                        0)) - GhostOrderOpenPrice());
                  } else ld_524 = iatr_216 * gd_772;
                  if (ld_524 > gi_764 * ld_88) ld_524 = gi_764 * ld_88;
                  if (ld_524 < gi_768 * ld_88) ld_524 = gi_768 * ld_88;
                  if (Bid - GhostOrderOpenPrice() > F_TrailingProfit_IV * ld_88 && (!Use_Exp_Trailing_IV)) ld_524 = F_Trailing_IV * ld_88;
                  price_532 = NormalizeDouble(Bid - ld_524, Digits);
                  if (Hidden_StopAndTarget) {
                     if (!(TimeCurrent() - GhostOrderOpenTime() > 300 && Bid <= MathMax(GhostOrderOpenPrice() - li_296 * ld_88, iHigh(NULL, PERIOD_M5, iHighest(NULL, PERIOD_M5, MODE_HIGH, iBarShift(NULL,
                        PERIOD_M5, GhostOrderOpenTime()) + 1, 0)) - ld_524) && iHigh(NULL, PERIOD_M5, iHighest(NULL, PERIOD_M5, MODE_HIGH, iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) + 1, 0)) - GhostOrderOpenPrice() > ld_524)) continue;
                     RefreshRates();
                  //--- 3: Assert replace OrderClose a buy trade with arrays
                     aCommand[aCount]  = 2;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Bid, Digits), slippage_380, Violet);*/
                     Sleep(5000);
                  } else {
                     if (Bid - GhostOrderOpenPrice() <= ld_524) continue;
                     if (GhostOrderStopLoss() > price_532 - Point) continue;
                  //--- 5: Assert replace OrderModify a buy trade with arrays
                     aCommand[aCount]     = 1; 
                     aStopLoss[aCount]    = price_532;
                     aOk[aCount]          = true;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*bool_76 = OrderModify(OrderTicket(), OrderOpenPrice(), price_532, OrderTakeProfit(), 0, Blue);
                     if (!(bool_76)) continue;
                     datetime_432 = TimeCurrent();
                     g_datetime_876 = datetime_432;*/
                     continue;
                  }
               } else {
                  if (GhostOrderStopLoss() == 0.0 && Hidden_StopAndTarget == FALSE) {
                     price_540 = NormalizeDouble(ihigh_256 + li_296 * ld_88, Digits);
                     price_548 = NormalizeDouble(GhostOrderOpenPrice() - (ihigh_256 - ilow_264) * TargetPercent, Digits);
                  //--- 5: Assert replace OrderModify a sell trade with arrays
                     aCommand[aCount]     = 3; 
                     aStopLoss[aCount]    = price_540;
                     aTakeProfit[aCount]  = price_548;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderModify(OrderTicket(), OrderOpenPrice(), price_540, price_548, 0, Green);*/
                  }
                  if (TimeCurrent() - GhostOrderOpenTime() > 300 && f0_13(gi_828, iClose(NULL, ReverseTF, 1), iOpen(NULL, ReverseTF, 1), GhostOrderOpenPrice() - Ask, ExitProfit * ld_88) == 1) {
                     RefreshRates();
                  //--- 3: Assert replace OrderClose a sell trade with arrays
                     aCommand[aCount]  = 4;
                     aCount ++;
                     if( aCount >= MaxAccountTrades ) break;
                     /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), slippage_380, Violet);*/
                     Sleep(5000);
                  } else count_412++;
                  if (TimeCurrent() >= li_436) {
                     if (Use_Exp_Trailing_IV) {
                        ld_524 = Exp_Trail_Factor_IV * ld_88 / MathMax(ld_88, GhostOrderOpenPrice() - (iLow(NULL, PERIOD_M5, iLowest(NULL, PERIOD_M5, MODE_LOW, iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) +
                           1, 0)) + Ask - Bid));
                     } else ld_524 = iatr_216 * gd_772;
                     if (ld_524 > gi_764 * ld_88) ld_524 = gi_764 * ld_88;
                     if (ld_524 < gi_768 * ld_88) ld_524 = gi_768 * ld_88;
                     if (GhostOrderOpenPrice() - Ask > F_TrailingProfit_III * ld_88 && (!Use_Exp_Trailing_IV)) ld_524 = F_Trailing_IV * ld_88;
                     price_532 = NormalizeDouble(Ask + ld_524, Digits);
                     if (Hidden_StopAndTarget) {
                        if (!(TimeCurrent() - GhostOrderOpenTime() > 300 && Ask >= Ask - Bid + MathMin(GhostOrderOpenPrice() + li_296 * ld_88, iLow(NULL, PERIOD_M5, iLowest(NULL, PERIOD_M5, MODE_LOW,
                           iBarShift(NULL, PERIOD_M5, GhostOrderOpenTime()) + 1, 0)) + ld_524) && GhostOrderOpenPrice() - (iLow(NULL, PERIOD_M5, iLowest(NULL, PERIOD_M5, MODE_LOW, iBarShift(NULL, PERIOD_M5,
                           GhostOrderOpenTime()) + 1, 0)) + Ask - Bid) > ld_524)) continue;
                        RefreshRates();
                     //--- 3: Assert replace OrderClose a sell trade with arrays
                        aCommand[aCount]  = 4;
                        aCount ++;
                        if( aCount >= MaxAccountTrades ) break;
                        /*OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(Ask, Digits), slippage_380, Violet);*/
                        Sleep(5000);
                        continue;
                     }
                     if (GhostOrderOpenPrice() - Ask > ld_524) {
                        if (GhostOrderStopLoss() >= price_532 + Point) {
                        //--- 5: Assert replace OrderModify a sell trade with arrays
                           aCommand[aCount]     = 3; 
                           aStopLoss[aCount]    = price_532;
                           aOk[aCount]          = true;
                           aCount ++;
                           if( aCount >= MaxAccountTrades ) break;
                           /*bool_76 = OrderModify(OrderTicket(), OrderOpenPrice(), price_532, OrderTakeProfit(), 0, Red);
                           if (bool_76) {
                              datetime_432 = TimeCurrent();
                              g_datetime_876 = datetime_432;
                           }*/
                        }
                     }
                  }
               }
            }
         }
      }
   }
//--- Assert 1: Free OrderSelect #1   
   GhostFreeSelect(true);
//--- Assert for: process array of commands
   for(int i=0; i<aCount; i++)
   {
      switch( aCommand[i] )
      {
         case 1:  // OrderModify Buy
            if( aOk[i] == false )
               GhostOrderModify( aTicket[i], aOpenPrice[i], aStopLoss[i], aTakeProfit[i], 0, Green );
            else
            {
               if( aMagicNumber[i] == Magic2 )
               {
                  if(GhostOrderModify( aTicket[i], aOpenPrice[i], aStopLoss[i], aTakeProfit[i], 0, Blue ))
                  {
                     datetime_416 = TimeCurrent();
                     g_datetime_868 = datetime_416;
                  }
               }
               if( aMagicNumber[i] == Magic3 )
               {
                  if(GhostOrderModify( aTicket[i], aOpenPrice[i], aStopLoss[i], aTakeProfit[i], 0, Blue ))
                  {
                     datetime_424 = TimeCurrent();
                     g_datetime_872 = datetime_424;
                  }
               }
               if( aMagicNumber[i] == Magic4 )
               {
                  if(GhostOrderModify( aTicket[i], aOpenPrice[i], aStopLoss[i], aTakeProfit[i], 0, Blue ))
                  {
                     datetime_432 = TimeCurrent();
                     g_datetime_876 = datetime_432;
                  }
               }
            }
            break;
         case 2:  // OrderClose Buy
            GhostOrderClose( aTicket[i], aLots[i], NormalizeDouble(Bid, Digits), slippage_380, Violet );
            break;
         case 3:  // OrderModify Sell
            if( aOk[i] == false )
               GhostOrderModify( aTicket[i], aOpenPrice[i], aStopLoss[i], aTakeProfit[i], 0, Green );
            else
            {
               if( aMagicNumber[i] == Magic2 )
               {
                  if(GhostOrderModify( aTicket[i], aOpenPrice[i], aStopLoss[i], aTakeProfit[i], 0, Red ))
                  {
                     datetime_416 = TimeCurrent();
                     g_datetime_868 = datetime_416;
                  }
               }
               if( aMagicNumber[i] == Magic3 )
               {
                  if(GhostOrderModify( aTicket[i], aOpenPrice[i], aStopLoss[i], aTakeProfit[i], 0, Red ))
                  {
                     datetime_424 = TimeCurrent();
                     g_datetime_872 = datetime_424;
                  }
               }
               if( aMagicNumber[i] == Magic4 )
               {
                  if(GhostOrderModify( aTicket[i], aOpenPrice[i], aStopLoss[i], aTakeProfit[i], 0, Red ))
                  {
                     datetime_432 = TimeCurrent();
                     g_datetime_876 = datetime_432;
                  }
               }
            }
            break;
         case 4:  // OrderClose Sell
            GhostOrderClose( aTicket[i], aLots[i], NormalizeDouble(Ask, Digits), slippage_380, Violet );
            break;
      }
   }
   double ld_556 = 0;
   if (StringSubstr(AccountCurrency(), 0, 3) == "JPY") {
      ld_556 = MarketInfo("USDJPY" + StringSubstr(Symbol(), 6), MODE_BID);
      if (ld_556 > 0.1) ld_40 = ld_556;
      else ld_40 = 84;
   }
   if (StringSubstr(AccountCurrency(), 0, 3) == "GBP") {
      ld_556 = MarketInfo("GBPUSD" + StringSubstr(Symbol(), 6), MODE_BID);
      if (ld_556 > 0.1) ld_40 = 1 / ld_556;
      else ld_40 = 0.6211180124;
   }
   if (StringSubstr(AccountCurrency(), 0, 3) == "EUR") {
      ld_556 = MarketInfo("EURUSD" + StringSubstr(Symbol(), 6), MODE_BID);
      if (ld_556 > 0.1) ld_40 = 1 / ld_556;
      else ld_40 = 0.7042253521;
   }
   if (EMAIL_Notification == TRUE) f0_6();
   bool li_564 = TRUE;
   bool li_568 = TRUE;
   if (No_Hedge_Trades == TRUE && count_388 > 0 || count_396 > 0 || count_404 > 0 || count_412 > 0) li_564 = FALSE;
   if (No_Hedge_Trades == TRUE && count_384 > 0 || count_392 > 0 || count_400 > 0 || count_408 > 0) li_568 = FALSE;
   if (NFA_Compatibility == TRUE && count_388 > 0 || count_396 > 0 || count_404 > 0 || count_412 > 0 || count_384 > 0 || count_392 > 0 || count_400 > 0 || count_408 > 0) {
      li_564 = FALSE;
      li_568 = FALSE;
   }
   double lots_572 = MathMin(g_maxlot_844, MathMax(g_minlot_836, LotsSys1));
   if (TradeMMSys1 > 0.0) lots_572 = MathMax(g_minlot_836, MathMin(g_maxlot_844, NormalizeDouble(f0_16() / ld_40 / 100.0 * GhostAccountFreeMargin() / g_lotstep_860 / (g_lotsize_856 / 100), 0) * g_lotstep_860));
   if (lots_572 > MaximalLots) lots_572 = MaximalLots;
   double lots_580 = MathMin(g_maxlot_844, MathMax(g_minlot_836, LotsSys2));
   if (TradeMMSys2 > 0.0) lots_580 = MathMax(g_minlot_836, MathMin(g_maxlot_844, NormalizeDouble(f0_0() / ld_40 / 100.0 * GhostAccountFreeMargin() / g_lotstep_860 / (g_lotsize_856 / 100), 0) * g_lotstep_860));
   if (lots_580 > MaximalLots) lots_580 = MaximalLots;
   double lots_588 = MathMin(g_maxlot_844, MathMax(g_minlot_836, LotsSys3));
   if (TradeMMSys3 > 0.0) lots_588 = MathMax(g_minlot_836, MathMin(g_maxlot_844, NormalizeDouble(f0_11() / ld_40 / 100.0 * GhostAccountFreeMargin() / g_lotstep_860 / (g_lotsize_856 / 100), 0) * g_lotstep_860));
   if (lots_588 > MaximalLots) lots_588 = MaximalLots;
   double lots_596 = MathMin(g_maxlot_844, MathMax(g_minlot_836, LotsSys4));
   if (TradeMMSys4 > 0.0) lots_596 = MathMax(g_minlot_836, MathMin(g_maxlot_844, NormalizeDouble(f0_19() / ld_40 / 100.0 * GhostAccountFreeMargin() / g_lotstep_860 / (g_lotsize_856 / 100), 0) * g_lotstep_860));
   if (lots_596 > MaximalLots) lots_596 = MaximalLots;
   if (!Use_FXCOMBO_Scalping) lots_572 = 0;
   if (!Use_FXCOMBO_Breakout) lots_580 = 0;
   if (!Use_FXCOMBO_Reversal) lots_588 = 0;
   if (!Use_FXCOMBO_EuroRange) lots_596 = 0;
   gs_820 = "\n\n   LOTS Sys1 : " + DoubleToStr(lots_572, 2) 
      + "\n   LOTS Sys2 : " + DoubleToStr(lots_580, 2) 
      + "\n   LOTS Sys3 : " + DoubleToStr(lots_588, 2) 
   + "\n   LOTS Sys4 : " + DoubleToStr(lots_596, 2);
   int cmd_36 = -1;
   if (Use_FXCOMBO_Scalping != FALSE) {
      if (count_384 < 1 && li_564 && f0_2(gi_828, iclose_152, ima_160, TREND_STR * ld_88, iwpr_168, OSC_open, gi_484, Hour(), li_300, li_304) == 0 && Bid < iclose_152 - gi_472 * ld_88) {
         if (ld_96 > MaxSPREAD) Print("System 1 BUY not taken due to high spead!");
         else {
            ls_604 = "BUY";
            cmd_36 = 0;
            color_32 = Aqua;
            RefreshRates();
            price_0 = NormalizeDouble(Ask, Digits);
            price_8 = price_0 - li_276 * ld_88;
            price_16 = price_0 + li_272 * ld_88;
         }
      }
      if (count_388 < 1 && li_568 && f0_2(gi_828, iclose_152, ima_160, TREND_STR * ld_88, iwpr_168, OSC_open, gi_484, Hour(), li_300, li_304) == 1 && Bid > iclose_152 +
         gi_472 * ld_88) {
         if (ld_96 > MaxSPREAD) Print("System 1 SELL not taken due to high spead!");
         else {
            ls_604 = "SELL";
            cmd_36 = 1;
            color_32 = Red;
            RefreshRates();
            price_0 = NormalizeDouble(Bid, Digits);
            price_8 = price_0 + li_276 * ld_88;
            price_16 = price_0 - li_272 * ld_88;
         }
      }
   }
   if (cmd_36 >= OP_BUY) {
      if (li_84 == FALSE) ticket_440 = GhostOrderSend(Symbol(), cmd_36, lots_572, price_0, slippage_380, 0, 0, CommentSys1, Magic1, 0, color_32);
      else ticket_440 = GhostOrderSend(Symbol(), cmd_36, lots_572, price_0, slippage_380, price_8, price_16, CommentSys1, Magic1, 0, color_32);
      Sleep(5000);
      if (ticket_440 > 0) {
      //--- Assert 1: Init OrderSelect #2
         GhostInitSelect(true,ticket_440,SELECT_BY_TICKET,MODE_TRADES);
         if (GhostOrderSelect(ticket_440, SELECT_BY_TICKET, MODE_TRADES)) Print("Order " + ls_604 + " opened!: ", GhostOrderOpenPrice());
      //--- Assert 1: Free OrderSelect #2
         GhostFreeSelect(false);
      } else Print("Error opening " + ls_604 + " order!: ", GetLastError());
   }
   cmd_36 = -1;
   if (!(TimeHour(TimeCurrent()) != li_316 && TimeHour(TimeCurrent()) != li_320 && TimeHour(TimeCurrent()) != li_324 && TimeHour(TimeCurrent()) != li_328 && TimeHour(TimeCurrent()) != li_332 &&
      TimeHour(TimeCurrent()) != li_336 && TimeHour(TimeCurrent()) != li_340 && TimeHour(TimeCurrent()) != li_344 && TimeHour(TimeCurrent()) != li_348 && TimeHour(TimeCurrent()) != li_352 && TimeHour(TimeCurrent()) != li_356 && TimeHour(TimeCurrent()) != li_360 && TimeHour(TimeCurrent()) != li_364 && TimeHour(TimeCurrent()) != li_368 && TimeHour(TimeCurrent()) != li_372) ||
      !(TimeHour(TimeCurrent()) != li_376)) {
      if (Use_FXCOMBO_Breakout != FALSE) {
         if (DayOfWeek() != gi_576) {
            if (CheckLossPause()) {
               if (count_396 < 1 && li_568 && f0_5(gi_828, iclose_208, ld_200, ld_192, Break * ld_88, Bid, (Break - 3) * ld_88) == 1) {
                  if (ld_96 > MaxSPREAD) Print("System 2 SELL not taken due to high spead!");
                  else {
                     ls_604 = "SELL";
                     cmd_36 = 1;
                     color_32 = Yellow;
                     RefreshRates();
                     price_0 = NormalizeDouble(Bid, Digits);
                     price_8 = price_0 + li_284 * ld_88;
                     price_16 = price_0 - li_280 * ld_88;
                  }
               }
               if (count_392 < 1 && li_564 && f0_5(gi_828, iclose_208, ld_200, ld_192, Break * ld_88, Bid, (Break - 3) * ld_88) == 0) {
                  if (ld_96 > MaxSPREAD) Print("System 2 BUY not taken due to high spead!");
                  else {
                     ls_604 = "BUY";
                     cmd_36 = 0;
                     color_32 = DodgerBlue;
                     RefreshRates();
                     price_0 = NormalizeDouble(Ask, Digits);
                     price_8 = price_0 - li_284 * ld_88;
                     price_16 = price_0 + li_280 * ld_88;
                  }
               }
            }
         }
      }
   }
   if (cmd_36 >= OP_BUY) {
      if (li_84 == FALSE) ticket_444 = GhostOrderSend(Symbol(), cmd_36, lots_580, price_0, slippage_380, 0, 0, CommentSys2, Magic2, 0, color_32);
      else ticket_444 = GhostOrderSend(Symbol(), cmd_36, lots_580, price_0, slippage_380, price_8, price_16, CommentSys2, Magic2, 0, color_32);
      Sleep(5000);
      if (ticket_444 > 0) {
      //--- Assert 1: Init OrderSelect #3
         GhostInitSelect(true,ticket_444,SELECT_BY_TICKET,MODE_TRADES);
         if (GhostOrderSelect(ticket_444, SELECT_BY_TICKET, MODE_TRADES)) Print("Order " + ls_604 + " opened!: ", GhostOrderOpenPrice());
      //--- Assert 1: Free OrderSelect #3
         GhostFreeSelect(false);
      } else Print("Error opening " + ls_604 + " order!: ", GetLastError());
   }
   cmd_36 = -1;
   if (Use_FXCOMBO_Reversal != FALSE) {
      if (count_400 < 1 && li_564 && (li_308 <= li_312 && TimeHour(TimeCurrent()) >= li_308 && TimeHour(TimeCurrent()) <= li_312) || (li_308 > li_312 && TimeHour(TimeCurrent()) >= li_308 ||
         TimeHour(TimeCurrent()) <= li_312) && f0_12(gi_828, ibands_240, ibands_248, gi_700 * ld_88, ihigh_224, ilow_232, gi_696 * ld_88) == 0) {
         if (ld_96 > MaxSPREAD) Print("System 3 BUY not taken due to high spead!");
         else {
            ls_604 = "BUY";
            cmd_36 = 0;
            color_32 = Aqua;
            RefreshRates();
            price_0 = NormalizeDouble(Ask, Digits);
            price_8 = price_0 - li_292 * ld_88;
            price_16 = price_0 + li_288 * ld_88;
         }
      }
      if (count_404 < 1 && li_568 && (li_308 <= li_312 && TimeHour(TimeCurrent()) >= li_308 && TimeHour(TimeCurrent()) <= li_312) || (li_308 > li_312 && TimeHour(TimeCurrent()) >= li_308 ||
         TimeHour(TimeCurrent()) <= li_312) && f0_12(gi_828, ibands_240, ibands_248, gi_700 * ld_88, ihigh_224, ilow_232, gi_696 * ld_88) == 1) {
         if (ld_96 > MaxSPREAD) Print("System 3 SELL not taken due to high spead!");
         else {
            ls_604 = "SELL";
            cmd_36 = 1;
            color_32 = DeepPink;
            RefreshRates();
            price_0 = NormalizeDouble(Bid, Digits);
            price_8 = price_0 + li_292 * ld_88;
            price_16 = price_0 - li_288 * ld_88;
         }
      }
   }
   if (cmd_36 >= OP_BUY) {
      if (li_84 == FALSE) ticket_448 = GhostOrderSend(Symbol(), cmd_36, lots_588, price_0, slippage_380, 0, 0, CommentSys3, Magic3, 0, color_32);
      else ticket_448 = GhostOrderSend(Symbol(), cmd_36, lots_588, price_0, slippage_380, price_8, price_16, CommentSys3, Magic3, 0, color_32);
      Sleep(5000);
      if (ticket_448 > 0) {
      //--- Assert 1: Init OrderSelect #4
         GhostInitSelect(true,ticket_448,SELECT_BY_TICKET,MODE_TRADES);
         if (GhostOrderSelect(ticket_448, SELECT_BY_TICKET, MODE_TRADES)) Print("Order " + ls_604 + " opened!: ", GhostOrderOpenPrice());
      //--- Assert 1: Free OrderSelect #4
         GhostFreeSelect(false);
      } else Print("Error opening " + ls_604 + " order!: ", GetLastError());
   }
   cmd_36 = -1;
   if (Use_FXCOMBO_EuroRange != FALSE) {
      if (count_408 < 1 && li_564 && f0_4(gi_828, gi_832, Hour(), Minute(), iOpen(NULL, PERIOD_M5, 0), ilow_264, ihigh_256, BreakPips * ld_88, gi_736 * ld_88, MaxRangePips * ld_88) == 0) {
         if (ld_96 > MaxSPREAD) Print("System 4 BUY not taken due to high spead!");
         else {
            ls_604 = "BUY";
            cmd_36 = 0;
            color_32 = Aqua;
            RefreshRates();
            price_0 = NormalizeDouble(Ask, Digits);
            price_8 = NormalizeDouble(ilow_264 - li_296 * ld_88, Digits);
            price_16 = NormalizeDouble(Ask + (ihigh_256 - ilow_264) * TargetPercent, Digits);
         }
      } else {
         if (count_412 < 1 && li_568 && f0_4(gi_828, gi_832, Hour(), Minute(), iOpen(NULL, PERIOD_M5, 0), ilow_264, ihigh_256, BreakPips * ld_88, gi_736 * ld_88, MaxRangePips * ld_88) == 1) {
            if (ld_96 > MaxSPREAD) Print("System 3 SELL not taken due to high spead!");
            else {
               ls_604 = "SELL";
               cmd_36 = 1;
               color_32 = DeepPink;
               RefreshRates();
               price_0 = NormalizeDouble(Bid, Digits);
               price_8 = NormalizeDouble(ihigh_256 + li_296 * ld_88, Digits);
               price_16 = NormalizeDouble(Bid - (ihigh_256 - ilow_264) * TargetPercent, Digits);
            }
         }
      }
   }
   if (cmd_36 >= OP_BUY) {
      if (li_84 == FALSE) ticket_452 = GhostOrderSend(Symbol(), cmd_36, lots_596, price_0, slippage_380, 0, 0, CommentSys4, Magic4, 0, color_32);
      else ticket_452 = GhostOrderSend(Symbol(), cmd_36, lots_596, price_0, slippage_380, price_8, price_16, CommentSys4, Magic4, 0, color_32);
      Sleep(5000);
      if (ticket_452 > 0) {
      //--- Assert 1: Init OrderSelect #5
         GhostInitSelect(true,ticket_452,SELECT_BY_TICKET,MODE_TRADES);
         if (GhostOrderSelect(ticket_452, SELECT_BY_TICKET, MODE_TRADES)) Print("Order " + ls_604 + " opened!: ", GhostOrderOpenPrice());
      //--- Assert 1: Free OrderSelect #5
         GhostFreeSelect(false);
      } else Print("Error opening " + ls_604 + " order!: ", GetLastError());
   }
   return (0);
}

double f0_16() {
   int li_8;
   double ld_16;
   double ld_ret_0 = TradeMMSys1;
   int li_12 = 0;
   if (Digits <= 3) ld_16 = 0.01;
   else ld_16 = 0.0001;
//--- Assert 2: Init OrderSelect #6
   int total = GhostOrdersHistoryTotal();
   GhostInitSelect(false,0,SELECT_BY_POS,MODE_HISTORY);
   for (int hist_total_24 = total; hist_total_24 >= 0; hist_total_24--) {
      if (GhostOrderSelect(hist_total_24, SELECT_BY_POS, MODE_HISTORY)) {
         if (GhostOrderType() <= OP_SELL && GhostOrderSymbol() == Symbol() && GhostOrderMagicNumber() == Magic1) {
            if (GhostOrderProfit() > 0.0) {
               if (gi_276 == 0) break;
               if (MathAbs(GhostOrderClosePrice() - GhostOrderOpenPrice()) / ld_16 > gi_276) break;
               continue;
            }
            li_12++;
         }
      }
   }
//--- Assert 1: Free OrderSelect #6
   GhostFreeSelect(false);
   if (li_12 > gi_268 && gi_272 > 1) {
      li_8 = MathMod(li_12, gi_272);
      ld_ret_0 *= MathPow(LossFactorSys1, li_8);
   }
   if (MMMax > 0.0 && ld_ret_0 > MMMax) ld_ret_0 = MMMax;
   return (ld_ret_0);
}

double f0_0() {
   int li_8;
   double ld_16;
   double ld_ret_0 = TradeMMSys2;
   int li_12 = 0;
   if (Digits <= 3) ld_16 = 0.01;
   else ld_16 = 0.0001;
//--- Assert 2: Init OrderSelect #7
   int total = GhostOrdersHistoryTotal();
   GhostInitSelect(false,0,SELECT_BY_POS,MODE_HISTORY);
   for (int hist_total_24 = total; hist_total_24 >= 0; hist_total_24--) {
      if (GhostOrderSelect(hist_total_24, SELECT_BY_POS, MODE_HISTORY)) {
         if (GhostOrderType() <= OP_SELL && GhostOrderSymbol() == Symbol() && GhostOrderMagicNumber() == Magic2) {
            if (GhostOrderProfit() > 0.0) {
               if (gi_320 == 0) break;
               if (MathAbs(GhostOrderClosePrice() - GhostOrderOpenPrice()) / ld_16 > gi_320) break;
               continue;
            }
            li_12++;
         }
      }
   }
//--- Assert 1: Free OrderSelect #7
   GhostFreeSelect(false);
   if (li_12 > gi_312 && gi_316 > 1) {
      li_8 = MathMod(li_12, gi_316);
      ld_ret_0 *= MathPow(LossFactorSys2, li_8);
   }
   if (MMMax > 0.0 && ld_ret_0 > MMMax) ld_ret_0 = MMMax;
   return (ld_ret_0);
}

double f0_11() {
   int li_8;
   double ld_16;
   double ld_ret_0 = TradeMMSys3;
   int li_12 = 0;
   if (Digits <= 3) ld_16 = 0.01;
   else ld_16 = 0.0001;
//--- Assert 2: Init OrderSelect #8
   int total = GhostOrdersHistoryTotal();
   GhostInitSelect(false,0,SELECT_BY_POS,MODE_HISTORY);
   for (int hist_total_24 = total; hist_total_24 >= 0; hist_total_24--) {
      if (GhostOrderSelect(hist_total_24, SELECT_BY_POS, MODE_HISTORY)) {
         if (GhostOrderType() <= OP_SELL && GhostOrderSymbol() == Symbol() && GhostOrderMagicNumber() == Magic3) {
            if (GhostOrderProfit() > 0.0) {
               if (gi_364 == 0) break;
               if (MathAbs(GhostOrderClosePrice() - GhostOrderOpenPrice()) / ld_16 > gi_364) break;
               continue;
            }
            li_12++;
         }
      }
   }
//--- Assert 1: Free OrderSelect #8
   GhostFreeSelect(false);
   if (li_12 > gi_356 && gi_360 > 1) {
      li_8 = MathMod(li_12, gi_360);
      ld_ret_0 *= MathPow(LossFactorSys3, li_8);
   }
   if (MMMax > 0.0 && ld_ret_0 > MMMax) ld_ret_0 = MMMax;
   return (ld_ret_0);
}

double f0_19() {
   int li_8;
   double ld_16;
   double ld_ret_0 = TradeMMSys4;
   int li_12 = 0;
   if (Digits <= 3) ld_16 = 0.01;
   else ld_16 = 0.0001;
//--- Assert 2: Init OrderSelect #9
   int total = GhostOrdersHistoryTotal();
   GhostInitSelect(false,0,SELECT_BY_POS,MODE_HISTORY);
   for (int hist_total_24 = total; hist_total_24 >= 0; hist_total_24--) {
      if (GhostOrderSelect(hist_total_24, SELECT_BY_POS, MODE_HISTORY)) {
         if (GhostOrderType() <= OP_SELL && GhostOrderSymbol() == Symbol() && GhostOrderMagicNumber() == Magic4) {
            if (GhostOrderProfit() > 0.0) {
               if (gi_408 == 0) break;
               if (MathAbs(GhostOrderClosePrice() - GhostOrderOpenPrice()) / ld_16 > gi_408) break;
               continue;
            }
            li_12++;
         }
      }
   }
//--- Assert 1: Free OrderSelect #9
   GhostFreeSelect(false);
   if (li_12 > gi_400 && gi_404 > 1) {
      li_8 = MathMod(li_12, gi_404);
      ld_ret_0 *= MathPow(LossFactorSys4, li_8);
   }
   if (MMMax > 0.0 && ld_ret_0 > MMMax) ld_ret_0 = MMMax;
   return (ld_ret_0);
}

int f0_1(bool ai_0) {
   string ls_4;
   if (gi_880 == 0) {
      ls_4 = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; Q312461)";
      gi_880 = InternetOpenA(ls_4, gi_888, "0", "0", 0);
      gi_884 = InternetOpenA(ls_4, gi_892, "0", "0", 0);
   }
   if (ai_0) return (gi_884);
   return (gi_880);
}

int f0_10(string as_0, string &as_8) {
   int lia_24[] = {1};
   string ls_28 = "x";
   int li_16 = InternetOpenUrlA(f0_1(0), as_0, "0", 0, -2080374528, 0);
   if (li_16 == 0) return (0);
   int li_20 = InternetReadFile(li_16, ls_28, gi_900, lia_24);
   if (li_20 == 0) return (0);
   int li_36 = lia_24[0];
   for (as_8 = StringSubstr(ls_28, 0, lia_24[0]); lia_24[0] != 0; as_8 = as_8 + StringSubstr(ls_28, 0, lia_24[0])) {
      li_20 = InternetReadFile(li_16, ls_28, gi_900, lia_24);
      if (lia_24[0] == 0) break;
      li_36 += lia_24[0];
   }
   li_20 = InternetCloseHandle(li_16);
   if (li_20 == 0) return (0);
   return (1);
}

string f0_9(string as_0, int ai_8, string as_12, string as_20, int &ai_28) {
   int li_40;
   string ls_ret_32 = "";
   ai_28 = StringFind(as_0, as_12, ai_8);
   if (ai_28 != -1) {
      ai_28 += StringLen(as_12);
      li_40 = StringFind(as_0, as_20, ai_28 + 1);
      ls_ret_32 = StringTrimLeft(StringTrimRight(StringSubstr(as_0, ai_28, li_40 - ai_28)));
   }
   return (ls_ret_32);
}

bool CheckLossPause() {
   double ld_4;
   int datetime_12;
   bool li_ret_0 = TRUE;
   if (Digits <= 3) ld_4 = 0.01;
   else ld_4 = 0.0001;
   if (gi_568 > 0 && gi_572 > 0) {
      datetime_12 = 0;
   //--- Assert 2: Init OrderSelect #10
      int total = GhostOrdersHistoryTotal();
      GhostInitSelect(false,0,SELECT_BY_POS,MODE_HISTORY);
      for (int pos_16 = total - 1; pos_16 >= 0; pos_16--) {
         if (GhostOrderSelect(pos_16, SELECT_BY_POS, MODE_HISTORY)) {
            if (GhostOrderSymbol() == Symbol() && GhostOrderMagicNumber() == Magic2) {
               if (!((GhostOrderType() == OP_BUY && (GhostOrderClosePrice() - GhostOrderOpenPrice()) / ld_4 <= (-gi_568)) || (GhostOrderType() == OP_SELL && (GhostOrderOpenPrice() - GhostOrderClosePrice()) / ld_4 <= (-gi_568)))) break;
               datetime_12 = GhostOrderCloseTime();
               break;
            }
         }
      }
   //--- Assert 1: Free OrderSelect #10
      GhostFreeSelect(false);
      if (TimeCurrent() - datetime_12 < 60 * gi_572) li_ret_0 = FALSE;
   }
   return (li_ret_0);
}

void f0_6() {
   string ls_0;
   string ls_8;
   bool li_16 = FALSE;
   if (IsTesting() || EMAIL_Notification == FALSE) return;
   if (g_datetime_904 == 0) {
      g_datetime_904 = TimeCurrent();
      return;
   }
   if (g_datetime_904 != TimeCurrent()) {
   //--- Assert 2: Init OrderSelect #11
      int total = GhostOrdersTotal();
      GhostInitSelect(true,0,SELECT_BY_POS,MODE_TRADES);
      for (int pos_20 = 0; pos_20 <= total - 1; pos_20++) {
         if (GhostOrderSelect(pos_20, SELECT_BY_POS, MODE_TRADES)) {
            if (GhostOrderType() <= OP_SELL && GhostOrderSymbol() == Symbol()) {
               ls_0 = "";
               ls_8 = "";
               if (GhostOrderOpenTime() >= g_datetime_904) {
                  if (GhostOrderMagicNumber() == Magic1) ls_0 = "FX COMBO - System 1";
                  else {
                     if (GhostOrderMagicNumber() == Magic2) ls_0 = "FX COMBO - System 2";
                     else {
                        if (GhostOrderMagicNumber() == Magic3) ls_0 = "FX COMBO - System 3";
                        else
                           if (GhostOrderMagicNumber() == Magic4) ls_0 = "FX COMBO - System 4";
                     }
                  }
               }
               if (StringLen(ls_0) > 1) {
                  if (GhostOrderType() == OP_BUY) ls_8 = "Buy";
                  else ls_8 = "Sell";
                  ls_8 = ls_8 + " order (" + GhostOrderTicket() + ") is opened: " + DoubleToStr(GhostOrderOpenPrice(), Digits) + ", SL:" + DoubleToStr(GhostOrderStopLoss(), Digits) + ", TP:" + DoubleToStr(GhostOrderTakeProfit(),
                     Digits);
                  li_16 = TRUE;
                  SendMail(ls_0, ls_8);
               }
            }
         }
      }
   //--- Assert 1: Free OrderSelect #11
      GhostFreeSelect(false);
   //--- Assert 2: Init OrderSelect #12
      total = GhostOrdersHistoryTotal();
      GhostInitSelect(false,0,SELECT_BY_POS,MODE_HISTORY);
      for (pos_20 = total - 1; pos_20 >= 0; pos_20--) {
         if (GhostOrderSelect(pos_20, SELECT_BY_POS, MODE_HISTORY)) {
            if (GhostOrderType() <= OP_SELL && GhostOrderSymbol() == Symbol()) {
               if (GhostOrderCloseTime() <= g_datetime_904) break;
               ls_0 = "";
               ls_8 = "";
               if (GhostOrderMagicNumber() == Magic1) ls_0 = "FX COMBO - System 1";
               else {
                  if (GhostOrderMagicNumber() == Magic2) ls_0 = "FX COMBO - System 2";
                  else {
                     if (GhostOrderMagicNumber() == Magic3) ls_0 = "FX COMBO - System 3";
                     else
                        if (GhostOrderMagicNumber() == Magic4) ls_0 = "FX COMBO - System 4";
                  }
               }
               if (StringLen(ls_0) > 1) {
                  if (GhostOrderType() == OP_BUY) ls_8 = "Buy";
                  else ls_8 = "Sell";
                  ls_8 = ls_8 + " order (" + GhostOrderTicket() + ") is closed at " + DoubleToStr(GhostOrderClosePrice(), Digits) + ", result: " + DoubleToStr(GhostOrderProfit(), 2);
                  li_16 = TRUE;
                  SendMail(ls_0, ls_8);
               }
            }
         }
      }
   //--- Assert 1: Free OrderSelect #12
      GhostFreeSelect(false);
      g_datetime_904 = TimeCurrent();
      if (li_16) Sleep(1000);
   }
}

int f0_21(int ai_0, int ai_4, int ai_8, int ai_12, int ai_16) {
   return (dllInit(ai_0, ai_4, ai_8, ai_12, ai_16));
}

int f0_2(int ai_0, double ad_4, double ad_12, double ad_20, double ad_28, double ad_36, double ad_44, int ai_52, int ai_56, int ai_60) {
   return (dllOpenCond1(ai_0, ad_4, ad_12, ad_20, ad_28, ad_36, ad_44, ai_52, ai_56, ai_60));
}

int f0_20(int ai_0, double ad_4, double ad_12) {
   return (dllCloseCond1(ai_0, ad_4, ad_12));
}

int f0_5(int ai_0, double ad_4, double ad_12, double ad_20, double ad_28, double ad_36, double ad_44) {
   return (dllOpenCond2(ai_0, ad_4, ad_12, ad_20, ad_28, ad_36, ad_44));
}

int f0_22(int ai_0, double ad_4, double ad_12, double ad_20, double ad_28) {
   return (dllCloseCond2(ai_0, ad_4, ad_12, ad_20, ad_28));
}

int f0_12(int ai_0, double ad_4, double ad_12, double ad_20, double ad_28, double ad_36, double ad_44) {
   return (dllOpenCond3(ai_0, ad_4, ad_12, ad_20, ad_28, ad_36, ad_44));
}

int f0_18(int ai_0, double ad_4, double ad_12, double ad_20, double ad_28, double ad_36, double ad_44) {
   return (dllCloseCond3(ai_0, ad_4, ad_12, ad_20, ad_28, ad_36, ad_44));
}

int f0_4(int ai_0, int ai_4, int ai_8, int ai_12, double ad_16, double ad_24, double ad_32, double ad_40, double ad_48, double ad_56) {
   return (dllOpenCond4(ai_0, ai_4, ai_8, ai_12, ad_16, ad_24, ad_32, ad_40, ad_48, ad_56));
}

int f0_13(int ai_0, double ad_4, double ad_12, double ad_20, double ad_28) {
   return (dllCloseCond4(ai_0, ad_4, ad_12, ad_20, ad_28));
}

void f0_17(int &ai_0, int &ai_4) {
   ai_0 = dllParamInit1(1);
   ai_4 = dllParamInit1(2);
}

void f0_7(int &ai_0, int &ai_4, int &ai_8, int &ai_12, int &ai_16, int &ai_20, int &ai_24, int &ai_28, int &ai_32, int &ai_36, int &ai_40, int &ai_44) {
   ai_0 = dllParamInit2(1);
   ai_4 = dllParamInit2(2);
   ai_8 = dllParamInit2(3);
   ai_12 = dllParamInit2(4);
   ai_16 = dllParamInit2(5);
   ai_20 = dllParamInit2(6);
   ai_24 = dllParamInit2(7);
   ai_28 = dllParamInit2(8);
   ai_32 = dllParamInit2(9);
   ai_36 = dllParamInit2(10);
   ai_40 = dllParamInit2(11);
   ai_44 = dllParamInit2(12);
}

double f0_8(double ad_0, double ad_8, double ad_16) {
   return (dllExpTrailLong(ad_0, ad_8, ad_16));
}

double f0_14(double ad_0, double ad_8, double ad_16) {
   return (dllExpTrailShort(ad_0, ad_8, ad_16));
}

int f0_15() {
   return (dllGMTOffset());
}
