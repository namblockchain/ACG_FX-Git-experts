/*
   Generated by EX4 TO MQ4 decompile Service 
   Website: http://www.ex4Tomq4.net 
   E-mail : info@ex4Tomq4.net 
*/
#import "Shark7.dll"
   bool Init(int a0, int a1, string a2, int a3, string a4, int a5, int a6, double a7, int a8, double a9, double a10, int a11, double a12, double a13, double a14, double a15, double a16, double a17, double a18, int a19);
   void SynchronizeOrder(int a0, int a1, int a2, double a3, double a4, double a5, double a6);
   void Start(int a0, int a1, double a2, double a3, double a4);
   void SetVolume(int a0, double a1, double a2, double a3);
   int GetOrderAction(int a0);
   int GetActionalOrderTicket(int a0);
   int GetActionalOrderType(int a0);
   double GetActionalOrderNumLots(int a0);
   double GetActionalOrderPrice(int a0);
   double GetActionalOrderStopLoss(int a0);
   double GetActionalOrderTakeProfit(int a0);
   int SetExecutedOrderTicket(int a0, int a1);
   void CompleteOrderAction(int a0, int a1);
   void Stop(int a0);
   bool HasMessage(int a0);
   string GetMessage(int a0);
   bool HasChartLabel(int a0);
   string GetChartLabelText(int a0);
   int GetChartLabelYDistance(int a0);
   int GetChartLabelColorType(int a0);
   void NextChartLabel(int a0);
   void Deinit(int a0);
#import

extern double MaxSpread = 1.5;
extern bool VolumeFilter.Enabled = TRUE;
extern double VolumeFilter.EURUSD = 100.0;
extern double VolumeFilter.GBPUSD = 80.0;
extern bool MoneyManagement.Enabled = TRUE;
extern double MoneyManagement.RiskPerTrade = 0.005;
extern string Order.Lots.Note = "Used only if money management disabled.";
extern double Order.Lots = 0.1;
extern string Order.Comment = "Shark 7";
extern int Order.MagicNumber = 0;
extern color Order.ArrowColor = CLR_NONE;
extern color Color.Regular = White;
extern color Color.Okay = Lime;
extern color Color.Warning = Orange;
extern color Color.Error = Red;
string gs_164;
int gi_172;
bool g_bool_176;
bool g_bool_180;
bool gi_184;
int gi_188 = 0;
string gsa_192[];

void init() {
   gs_164 = Symbol();
   int timeframe_0 = Period();
   gi_172 = WindowHandle(gs_164, timeframe_0);
   g_bool_176 = IsTesting();
   g_bool_180 = IsDllsAllowed();
   if (!g_bool_180) {
      Alert("DLL imports must be allowed!");
      return;
   }
   gi_184 = Init(gi_172, AccountNumber(), AccountName(), MarketInfo(gs_164, MODE_DIGITS), gs_164, timeframe_0, IsTradeAllowed(), MaxSpread / 10000.0, VolumeFilter.Enabled,
      VolumeFilter.EURUSD, VolumeFilter.GBPUSD, MoneyManagement.Enabled, MoneyManagement.RiskPerTrade, Order.Lots, MarketInfo(gs_164, MODE_LOTSIZE), MarketInfo(gs_164,
      MODE_LOTSTEP), MarketInfo(gs_164, MODE_MINLOT), MarketInfo(gs_164, MODE_MAXLOT), MarketInfo(gs_164, MODE_STOPLEVEL) * MarketInfo(gs_164, MODE_POINT), g_bool_176);
   PrintMessages();
   ShowChartLabels();
}

void start() {
   int pos_0;
   int order_total_4;
   bool li_8;
   int ticket_20;
   if (gi_184) {
      pos_0 = 0;
      order_total_4 = OrdersTotal();
      while (pos_0 < order_total_4) {
         if (OrderSelect(pos_0, SELECT_BY_POS)) SynchronizeOrder(gi_172, OrderTicket(), OrderType(), OrderLots(), OrderOpenPrice(), OrderStopLoss(), OrderTakeProfit());
         pos_0++;
      }
      Start(gi_172, MarketInfo(gs_164, MODE_TIME), MarketInfo(gs_164, MODE_BID), MarketInfo(gs_164, MODE_ASK), AccountFreeMargin());
      if (!g_bool_176) SetVolume(gi_172, iVolume(gs_164, PERIOD_M5, 1), iVolume(gs_164, PERIOD_M5, 2), iVolume(gs_164, PERIOD_M5, 3));
      for (int li_12 = GetOrderAction(gi_172); li_12 != 0; li_12 = GetOrderAction(gi_172)) {
         switch (li_12) {
         case 1:
            ticket_20 = OrderSend(gs_164, GetActionalOrderType(gi_172), GetActionalOrderNumLots(gi_172), GetActionalOrderPrice(gi_172), 0, GetActionalOrderStopLoss(gi_172), GetActionalOrderTakeProfit(gi_172),
               Order.Comment, Order.MagicNumber, 0, Order.ArrowColor);
            li_8 = ticket_20 > -1;
            if (!(li_8)) break;
            SetExecutedOrderTicket(gi_172, ticket_20);
            break;
         case 2:
            li_8 = OrderModify(GetActionalOrderTicket(gi_172), GetActionalOrderPrice(gi_172), GetActionalOrderStopLoss(gi_172), GetActionalOrderTakeProfit(gi_172), 0);
            break;
         case 4:
            li_8 = OrderDelete(GetActionalOrderTicket(gi_172));
            break;
         default:
            li_8 = FALSE;
         }
         CompleteOrderAction(gi_172, li_8);
      }
      Stop(gi_172);
      ShowChartLabels();
   }
}

void deinit() {
   gi_184 = FALSE;
   HideChartLabels();
   if (g_bool_180) Deinit(gi_172);
}

void PrintMessages() {
   while (HasMessage(gi_172)) Print(GetMessage(gi_172));
}

int GetColorByType(int ai_0) {
   switch (ai_0) {
   case 1:
      return (Color.Okay);
   case 2:
      return (Color.Warning);
   case 3:
      return (Color.Error);
   }
   return (Color.Regular);
}

string GetChartLabelName(int ai_0) {
   return ("Shark Chart Label " + ai_0);
}

void ShowChartLabels() {
   int li_0;
   string name_4;
   if (g_bool_176 == FALSE) {
      li_0 = gi_188;
      gi_188 = 0;
      while (HasChartLabel(gi_172)) {
         name_4 = GetChartLabelName(gi_188);
         NextChartLabel(gi_172);
         if (ObjectFind(name_4) == -1) ObjectCreate(name_4, OBJ_LABEL, 0, 0, 0);
         ObjectSet(name_4, OBJPROP_CORNER, 1);
         ObjectSet(name_4, OBJPROP_XDISTANCE, 5);
         ObjectSet(name_4, OBJPROP_YDISTANCE, GetChartLabelYDistance(gi_172));
         ObjectSet(name_4, OBJPROP_ANGLE, 0);
         ObjectSetText(name_4, GetChartLabelText(gi_172), 8, "Lucida Console", GetColorByType(GetChartLabelColorType(gi_172)));
         gi_188++;
         ArrayResize(gsa_192, gi_188);
         gsa_192[gi_188 - 1] = name_4;
      }
      while (li_0 > gi_188) {
         li_0--;
         ObjectDelete(GetChartLabelName(li_0));
      }
      ObjectsRedraw();
   }
}

void HideChartLabels() {
   if (g_bool_176 == FALSE) {
      while (gi_188 > 0) {
         gi_188--;
         ObjectDelete(GetChartLabelName(gi_188));
      }
      ArrayResize(gsa_192, 0);
      ObjectsRedraw();
   }
}
